{
    "docs": [
        {
            "location": "/index.html", 
            "text": "Welcome to Wyliodrin's documentation page\n\n\nlibwyliodrin\n\n\nlibwyliodrin is an open source library used for controlling pins on multiple embedded boards. The library is compatible with Raspberry Pi, Intel Galileo (R) and Intel Edison (R), BeagleBone Black and UDOO boards. The library can be used in C/C++, Python and JavaScript projects.\n\nThis platform presents all the available functions together with a detailed description.\n\n\nVisual Blocks\n\n\nWyliodrin support visual programming besides the classical languages. The visual platform is based on Google Blockly and offers a wide array of elements to be used in writing applications.\n\nThis documentation page explains what each visual element does and how to use it.\n\n\nNote\n\n\nThe functions and visual elements described in this documentation can behave differently depending on the board the project runs as the pins' characteristics are different for each hardware. We suggest you document on the placement and behaviour of the pins before writing the applications.\n\n\nLicense\n\n\nThe text of Wyliodrin documentation is licensed under a \nCreative Commons Attribution-ShareAlike 3.0 License\n. Part of the content is based on the text of the \nArduino reference\n.", 
            "title": "Overview"
        }, 
        {
            "location": "/index.html#welcome-to-wyliodrins-documentation-page", 
            "text": "", 
            "title": "Welcome to Wyliodrin's documentation page"
        }, 
        {
            "location": "/index.html#libwyliodrin", 
            "text": "libwyliodrin is an open source library used for controlling pins on multiple embedded boards. The library is compatible with Raspberry Pi, Intel Galileo (R) and Intel Edison (R), BeagleBone Black and UDOO boards. The library can be used in C/C++, Python and JavaScript projects. \nThis platform presents all the available functions together with a detailed description.", 
            "title": "libwyliodrin"
        }, 
        {
            "location": "/index.html#visual-blocks", 
            "text": "Wyliodrin support visual programming besides the classical languages. The visual platform is based on Google Blockly and offers a wide array of elements to be used in writing applications. \nThis documentation page explains what each visual element does and how to use it.", 
            "title": "Visual Blocks"
        }, 
        {
            "location": "/index.html#note", 
            "text": "The functions and visual elements described in this documentation can behave differently depending on the board the project runs as the pins' characteristics are different for each hardware. We suggest you document on the placement and behaviour of the pins before writing the applications.", 
            "title": "Note"
        }, 
        {
            "location": "/index.html#license", 
            "text": "The text of Wyliodrin documentation is licensed under a  Creative Commons Attribution-ShareAlike 3.0 License . Part of the content is based on the text of the  Arduino reference .", 
            "title": "License"
        }, 
        {
            "location": "/constants/index.html", 
            "text": "HIGH\n\n\nIt can be replaced by the value 1. \n\n\nLOW\n\n\nIt can be replaced by the value 0.\n\n\nINPUT\n\n\nIt can be replaced by the value 0.\n\n\nOUTPUT\n\n\nIt can be replaced by the value 1.\n\n\nLSBFIRST\n\n\nIt can be replaced by the value 0.\nIt stands for Least Significant Bit First and is used as a parameter for \nshiftIn\n and \nshiftOut\n functions. LSBFIRST implies that the first bit taken into account is the rightmost one.\n\n\nMSBFIRST\n\n\nIt can be replaced by the value 1.\n\nIt stands for Most Significant Bit First and is used as a parameter for \nshiftIn\n and \nshiftOut\n functions. MSBFIRST implies that the first bit taken into account is the leftmost one.\n\n\nSPI_MODE0\n\n\nIt can be replaced by the value 0x00 and is used for SPI communication as a parameter to \nsetDataMode\n function (CPOL=0, CPHA=0). \n\n\nSPI_MODE1\n\n\nIt can be replaced by the value 0x04 and is used for SPI communication as a parameter to \nsetDataMode\n function (CPOL=0, CPHA=1).\n\n\nSPI_MODE2\n\n\nIt can be replaced by the value 0x08 and is used for SPI communication as a parameter to \nsetDataMode\n function (CPOL=1, CPHA=0).\n\n\nSPI_MODE3\n\n\nIt can be replaced by the value 0x0C and is used for SPI communication as a parameter to \nsetDataMode\n function (CPOL=1, CPHA=1).\n\n\nSPI_CLOCK_DIV2\n\n\nIt can be replaced by the value 0x04 and is used for SPI communication as a parameter to \nsetClockDivider\n function.\n\n\nSPI_CLOCK_DIV4\n\n\nIt can be replaced by the value 0x00 and is used for SPI communication as a parameter to \nsetClockDivider\n function.\n\n\nSPI_CLOCK_DIV8\n\n\nIt can be replaced by the value 0x05 and is used for SPI communication as a parameter to \nsetClockDivider\n function.\n\n\nSPI_CLOCK_DIV16\n\n\nIt can be replaced by the value 0x01 and is used for SPI communication as a parameter to \nsetClockDivider\n function.\n\n\nSPI_CLOCK_DIV32\n\n\nIt can be replaced by the value 0x06 and is used for SPI communication as a parameter to \nsetClockDivider\n function.\n\n\nSPI_CLOCK_DIV64\n\n\nIt can be replaced by the value 0x02 and is used for SPI communication as a parameter to \nsetClockDivider\n function.\n\n\nSPI_CLOCK_DIV128\n\n\nIt can be replaced by the value 0x03 and is used for SPI communication as a parameter to \nsetClockDivider\n function.", 
            "title": "Constants"
        }, 
        {
            "location": "/constants/index.html#high", 
            "text": "It can be replaced by the value 1.", 
            "title": "HIGH"
        }, 
        {
            "location": "/constants/index.html#low", 
            "text": "It can be replaced by the value 0.", 
            "title": "LOW"
        }, 
        {
            "location": "/constants/index.html#input", 
            "text": "It can be replaced by the value 0.", 
            "title": "INPUT"
        }, 
        {
            "location": "/constants/index.html#output", 
            "text": "It can be replaced by the value 1.", 
            "title": "OUTPUT"
        }, 
        {
            "location": "/constants/index.html#lsbfirst", 
            "text": "It can be replaced by the value 0.\nIt stands for Least Significant Bit First and is used as a parameter for  shiftIn  and  shiftOut  functions. LSBFIRST implies that the first bit taken into account is the rightmost one.", 
            "title": "LSBFIRST"
        }, 
        {
            "location": "/constants/index.html#msbfirst", 
            "text": "It can be replaced by the value 1. \nIt stands for Most Significant Bit First and is used as a parameter for  shiftIn  and  shiftOut  functions. MSBFIRST implies that the first bit taken into account is the leftmost one.", 
            "title": "MSBFIRST"
        }, 
        {
            "location": "/constants/index.html#spi_mode0", 
            "text": "It can be replaced by the value 0x00 and is used for SPI communication as a parameter to  setDataMode  function (CPOL=0, CPHA=0).", 
            "title": "SPI_MODE0"
        }, 
        {
            "location": "/constants/index.html#spi_mode1", 
            "text": "It can be replaced by the value 0x04 and is used for SPI communication as a parameter to  setDataMode  function (CPOL=0, CPHA=1).", 
            "title": "SPI_MODE1"
        }, 
        {
            "location": "/constants/index.html#spi_mode2", 
            "text": "It can be replaced by the value 0x08 and is used for SPI communication as a parameter to  setDataMode  function (CPOL=1, CPHA=0).", 
            "title": "SPI_MODE2"
        }, 
        {
            "location": "/constants/index.html#spi_mode3", 
            "text": "It can be replaced by the value 0x0C and is used for SPI communication as a parameter to  setDataMode  function (CPOL=1, CPHA=1).", 
            "title": "SPI_MODE3"
        }, 
        {
            "location": "/constants/index.html#spi_clock_div2", 
            "text": "It can be replaced by the value 0x04 and is used for SPI communication as a parameter to  setClockDivider  function.", 
            "title": "SPI_CLOCK_DIV2"
        }, 
        {
            "location": "/constants/index.html#spi_clock_div4", 
            "text": "It can be replaced by the value 0x00 and is used for SPI communication as a parameter to  setClockDivider  function.", 
            "title": "SPI_CLOCK_DIV4"
        }, 
        {
            "location": "/constants/index.html#spi_clock_div8", 
            "text": "It can be replaced by the value 0x05 and is used for SPI communication as a parameter to  setClockDivider  function.", 
            "title": "SPI_CLOCK_DIV8"
        }, 
        {
            "location": "/constants/index.html#spi_clock_div16", 
            "text": "It can be replaced by the value 0x01 and is used for SPI communication as a parameter to  setClockDivider  function.", 
            "title": "SPI_CLOCK_DIV16"
        }, 
        {
            "location": "/constants/index.html#spi_clock_div32", 
            "text": "It can be replaced by the value 0x06 and is used for SPI communication as a parameter to  setClockDivider  function.", 
            "title": "SPI_CLOCK_DIV32"
        }, 
        {
            "location": "/constants/index.html#spi_clock_div64", 
            "text": "It can be replaced by the value 0x02 and is used for SPI communication as a parameter to  setClockDivider  function.", 
            "title": "SPI_CLOCK_DIV64"
        }, 
        {
            "location": "/constants/index.html#spi_clock_div128", 
            "text": "It can be replaced by the value 0x03 and is used for SPI communication as a parameter to  setClockDivider  function.", 
            "title": "SPI_CLOCK_DIV128"
        }, 
        {
            "location": "/functions/index.html", 
            "text": "pinMode()\n\n\nDescription\n\nConfigures the specified pin to behave either as an input or an output.\n\n\nSyntax\n\npinMode (pin, mode)\n\n\nParameters\n\n- pin: the number of the pin whose mode you wish to set (int);\n\n- mode: \nINPUT\n, \nOUTPUT\n (int).\n\n\nReturns\n\nNone\n\n\nExample\n\nPython:\n\n\nfrom wyliodrin import * # imports wyliodrin module\n\npinMode (1, INPUT)      # sets pin 1 as input  \npinMode (2, OUTPUT)     # sets pin 2 as output\n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin');   // imports wyliodrin module\n\nwyliodrin.pinMode (1, wyliodrin.INPUT);  // sets pin 1 as input  \nwyliodrin.pinMode (2, wyliodrin.OUTPUT); // sets pin 2 as output\n\n\n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n          //imports wyliodrin library\n\nint main()\n{\n    pinMode (1, INPUT);         // sets pin 1 as input  \n    pinMode (2, OUTPUT);        // sets pin 2 as output\n    return 0;\n}\n\n\n\n\ndigitalWrite()\n\n\nDescription\n\nWrite a \nHIGH\n or a \nLOW\n value to a digital pin.\n\nNOTE: If you do not set the pinMode() to \nOUTPUT\n, and connect an LED to a pin, when calling digitalWrite(HIGH), the LED may appear dim. Without explicitly setting pinMode(), on most of the boards, the pin will have enabled the internal pull-up resistor, which acts like a large current-limiting resistor.\n\n\nSyntax\n\ndigitalWrite (pin, value)\n\n\nParameters\n\n- pin: the number of the pin you wish to control (int);\n\n- value: \nHIGH\n, \nLOW\n (int).\n\n\nReturns\n\nNone\n\n\nExample\n\nPython:\n\n\nfrom wyliodrin import * # imports wyliodrin module\n\npinMode (1, OUTPUT)    # sets pin 1 as output\ndigitalWrite (1, HIGH) # sets the pin on\ndelay (1000)           # waits for a second\ndigitalWrite (1, LOW)  # sets the pin off\n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin');      // imports wyliodrin module\n\nwyliodrin.pinMode (1, wyliodrin.OUTPUT);    // sets pin 1 as output\nwyliodrin.digitalWrite (1, wyliodrin.HIGH); // sets the pin on\nwyliodrin.delay (1000);                     //waits for a second\nwyliodrin.digitalWrite (1, wyliodrin.LOW);  // sets the pin off\n\n\n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n       //imports wyliodrin library\n\nint main()\n{\n    pinMode (1, OUTPUT);     // sets pin 1 as output\n    digitalWrite (1, HIGH);  // sets the pin on\n    delay (1000);            // waits for a second\n    digitalWrite (1, LOW);   // sets the pin off\n    return 0;\n}\n\n\n\n\ndigitalRead()\n\n\nDescription\n\nReads the value from a specified digital pin, either \nHIGH\n or \nLOW\n.\nNote: If the pin isn't connected to anything, digitalRead() can return either HIGH or LOW (and this can change randomly).\n\n\nSyntax\n\ndigitalRead (pin)\n\n\nParameters\n\n- pin: the number of the pin you wish to read (int).  \n\n\nReturns\n\n\nHIGH\n or \nLOW\n (int)\n\n\nExample\n\nPython:\n\n\nfrom wyliodrin import *  # imports wyliodrin module\n\npinMode (1, INPUT)       # sets pin 1 as input\nvalue = digitalRead (1)  # reads the input pin and stores the value\nprint value              # prints the value on the screen\n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin');  // imports wyliodrin module\n\nwyliodrin.pinMode (1, wyliodrin.INPUT); // sets pin 1 as input\nvar value = wyliodrin.digitalRead (1);  // reads the input pin and stores the value\nconsole.log (value);                    // prints the value on the screen\n\n\n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n        //imports wyliodrin library\n\nint main()\n{\n    int value; \n    pinMode (1, INPUT);       // sets pin 1 as input\n    value = digitalRead (1);  // reads the input pin and stores the value\n    printf(\n%d\\n\n, value);    // prints the value on the screen\n    return 0;\n}\n\n\n\n\nanalogWrite()\n\n\nDescription\n\nWrites an analog value (\nPWM wave\n) to a pin. Can be used to light a LED at varying brightnesses or drive a motor at various speeds.\n\nNOTE: The frequency of the PWM signal is different depending on the board you are using. We suggest reading the specifications of the board before using PWM signals.\n\n\nSyntax\n\nanalogWrite (pin, value)\n\n\nParameters\n\n- pin: the number of the pin you wish to control (int); \n- value: the duty cycle, in the interval [0,255] (int).\n\n\nReturns\n\nNone\n\n\nExample\n\nPython:\n\n\nfrom wyliodrin import *  # imports wyliodrin module\n\npinMode (1, OUTPUT)      # sets pin 1 as output\nfor i in range (0,256):  # i gets values from 0 to 255\n    analogWrite (1, i)   # write value of i on pin 1\n    delay (100)          # waits for 100 milliseconds\n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin');  //imports wyliodrin module\n\nwyliodrin.pinMode (1, OUTPUT);          // sets pin 1 as output\nvar i;\nfor (i = 0; i \n 256; i++)               // i gets values from 0 to 255\n{\n    wyliodrin.analogWrite (1, i);       // write value of i on pin 1\n    wyliodrin.delay (100);              // waits for 100 milliseconds\n}\n\n\n\n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n          //imports wyliodrin library\n\nint main()\n{\n    int i;\n    pinMode (1, OUTPUT);        // sets pin 1 as output\n    for (i = 0; i \n 256; i++)   // i gets values from 0 to 255\n    {\n        analogWrite (1, i);     // write value of i on pin 1\n        delay (100);            // waits for 100 milliseconds\n    }\n    return 0;\n}\n\n\n\n\nanalogRead()\n\n\nDescription\n\nReads the value from the specified analog pin. The function scales the values to 0-1023 interval.\n\nNote: If the analog input pin is not connected to anything, the value returned by analogRead() will fluctuate based on a number of factors (e.g. the values of the other analog inputs, how close your hand is to the board etc.).\n\n\nSyntax\n\nanalogRead (pin)\n\n\nParameters\n\n- pin: the number of the pin you wish to read (int).\n\n//imports wyliodrin module\n\nReturns\n\na value in the interval [0,1023] (int)\n\n\nExample\n\nPython:\n\n\nfrom wyliodrin import *  # imports wyliodrin module\n\nvalue = analogRead (1)   # reads the input pin and stores the value\nprint value              # prints the value on the screen\n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin');  //imports wyliodrin module\n\nvar value = wyliodrin.analogRead (1);   // reads the input pin and stores the value\nconsole.log (value);                    // prints the value on the screen\n\n\n\n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n                  //imports wyliodrin library\n\nint main()\n{\n    int value;\n    value = analogRead (1);             // reads the input pin and stores the value\n    printf (\nvalue is : %d\\n\n, value);  // prints the value on the screen\n    return 0;\n}\n\n\n\n\nanalogWriteRaw()\n\n\nDescription\n\nWrites a raw analog value (\nPWM wave\n) to a pin. Can be used to light a LED at varying brightnesses or drive a motor at various speeds.\n\nNOTE: The values that can be written to the pin depend on each board.\n\n\nSyntax\n\nanalogWriteRaw (pin, value)\n\n\nParameters\n\n- pin: the number of the pin you wish to control (int); \n- value: the raw duty cycle, depends on the board  (int).\n\n\nReturns\n\nNone\n\n\nExample\n\nPython:\n\n\nfrom wyliodrin import *   # imports wyliodrin module\n\npinMode (1, OUTPUT)       # sets pin 1 as output\nfor i in range (0,256):   # i gets values from 0 to 255\n    analogWriteRaw (1, i) # write value of i on pin 1\n    delay (100) \n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin');  //imports wyliodrin module\n\nwyliodrin.pinMode (1, OUTPUT);          // sets pin 1 as output\nvar i;\nfor (i = 0; i \n 256; i++)               // i gets values from 0 to 255\n{\n    wyliodrin.analogWriteRaw (1, i);    // write value of i on pin 1\n    wyliodrin.delay (100);              // waits for 100 milliseconds\n}\n\n\n\n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n          //imports wyliodrin library\n\nint main()\n{\n    int i;\n    pinMode (1, OUTPUT);        // sets pin 1 as output\n    for (i = 0; i \n 256; i++)   // i gets values from 0 to 255\n    {\n        analogWriteRaw (1, i);  // write value of i on pin 1\n        delay (100);            // waits for 100 milliseconds\n    }\n    return 0;\n}\n\n\n\n\nanalogReadRaw()\n\n\nDescription\n\nReads the raw value from the specified analog pin. The values depend on the board.\n\n\nSyntax\n\nanalogReadRaw (pin)\n\n\nParameters\n\n- pin: the number of the pin you wish to read (int). \n\n\nReturns\n\na value from an interval depending on the board (int)\n\n\nExample\n\nPython:\n\n\nfrom wyliodrin import *   # imports wyliodrin module\n\nvalue = analogReadRaw (1) # reads the input pin and stores the raw value\nprint value               # prints the value on the screen\n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin');      //imports wyliodrin module\n\nvar value = wyliodrin.analogReadRaw (1);   // reads the input pin and stores the value\nconsole.log (value);                       // prints the value on the screen\n\n\n\n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n                      //imports wyliodrin library\n\nint main()\n{\n    int value;\n    value = analogReadRaw (1);              // reads the input pin and stores the value\n    printf (\nraw value is : %d\\n\n, value);  // prints the value on the screen\n    return 0;\n}\n\n\n\n\npulseIn()\n\n\nDescription\n\nReads a pulse (either \nHIGH\n or \nLOW\n) on a pin. For example, if value is HIGH, pulseIn() waits for the pin to go HIGH, starts timing, then waits for the pin to go LOW and stops timing. Returns the length of the pulse in microseconds.\n\n\nSyntax\n\npulseIn (pin, value) \n\n\nParameters\n\n- pin: the number of the pin on which wish to read the pulse (uint8_t);\n\n- value: type of pulse to read, either HIGH or LOW (uint8_t). \n\n\nReturns\n\nthe length of the pulse in microseconds (unsigned long)\n\n\nExample\n\nPython:\n\n\nfrom wyliodrin import *         # imports wyliodrin module\n\npinMode (1, INPUT)              # sets pin 1 as input\nwhile True:\n    value = pulseIn (1, HIGH)   # reads the microseconds between LOW and HIGH stores the value\n    print value                 # prints the value on the screen\n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin');  //imports wyliodrin module\n\nwyliodrin.pinMode (1, wyliodrin.INPUT); // sets pin 1 as input\nwhile (true)\n{\n    // reads the microseconds between LOW and HIGH stores the value\n    var value = wyliodrin.pulseIn (1, wyliodrin.HIGH); \n    console.log (value);                // prints the value on the screen\n}\n\n\n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n              //imports wyliodrin library\n\nint main()\n{\n    unsigned long value;\n    pinMode (1, INPUT);             // sets pin 1 as input\n    while (true)\n    {\n\n        value = pulseIn (1, HIGH); // reads the microseconds between LOW and HIGH stores the value\n        printf (\n%d\\n\n, value);    // prints the value on the screen\n    }\n    return 0;\n}\n\n\n\n\nshiftIn()\n\n\nDescription\n\nShifts in a byte of data one bit at a time. Starts from either the most (the leftmost) or least (the rightmost) significant bit. For each bit, the clock pin is pulled high, the next bit is read from the data line, and then the clock pin is taken low.\n\n\nSyntax\n\nshiftIn (dataPin, clockPin, bitOrder)\n\n\nParameters\n\n- dataPin: the pin on which to input each bit (uint8_t);\n\n- clockPin: the pin to toggle to signal a read from dataPin (uint8_t);\n\n- bitOrder: which order to shift in the bits (\nMSBFIRST\n or \nLSBFIRST\n) (uint8_t). \n\n\nReturns\n\nthe value read (uint8_t)\n\n\nExample\n\nPython:\n\n\nfrom wyliodrin import *     # imports wyliodrin module\n\nlatchPin = 8\nclockPin = 12\ndataPin  = 11\n\npinMode (latchPin, OUTPUT) # sets latch pin as output\n\n# sets pins to input\npinMode (clockPin, INPUT)\npinMode (dataPin, INPUT)\n\n# set latchPin to low and hold low for as long as you are reading\ndigitalWrite(latchPin, LOW)\n\n# read the first byte and store it\nfirstByte = shiftIn(dataPin, clockPin, LSBFIRST)\n\n# return the latch pin high to signal chip that it can send the next byte\ndigitalWrite(latchPin, HIGH)\n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin');  //imports wyliodrin module\n\nvar latchPin = 8;\nvar clockPin = 12;\nvar dataPin  = 11;\n\nwyliodrin.pinMode (latchPin, wyliodrin.OUTPUT); // sets latch pin as output\n\n// sets pins to input\nwyliodrin.pinMode (clockPin, wyliodrin.INPUT);\nwyliodrin.pinMode (dataPin, wyliodrin.INPUT);\n\n// set latchPin to low and hold low for as long as you are reading\nwyliodrin.digitalWrite(latchPin, wyliodrin.LOW);\n\n// read the first byte and store it\nvar firstByte = wyliodrin.shiftIn(dataPin, clockPin, wyliodrin.LSBFIRST);\n\n// return the latch pin high to signal chip that it can send the next byte\nwyliodrin.digitalWrite(latchPin, wyliodrin.HIGH);\n\n\n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n          //imports wyliodrin library\n\nint main()\n{\n    uint8_t latchPin = 8;\n    uint8_t clockPin = 12;\n    uint8_t dataPin  = 11;\n\n    uint8_t firstByte;\n\n    pinMode (latchPin, OUTPUT); // sets latch pin as output\n\n    // sets pins to input\n    pinMode (clockPin, INPUT);\n    pinMode (dataPin, INPUT);\n\n    // set latchPin to low and hold low for as long as you are reading\n    digitalWrite(latchPin, LOW);\n\n    // read the first byte and store it\n    firstByte = shiftIn(dataPin, clockPin, LSBFIRST);\n\n    // return the latch pin high to signal chip that it can send the next byte\n    digitalWrite(latchPin, HIGH);\n    return 0;\n}\n\n\n\n\nshiftOut()\n\n\nDescription\n\nShifts out a byte of data one bit at a time. Starts from either the most (the leftmost) or least (the rightmost) significant bit. For each bit, the clock pin is pulled high, the next bit is sent to the data line, and then the clock pin is taken low to indicate that the bit is available.\n\nNOTE: The \ndataPin\n and \nclockPin\n must already be configured as outputs by a call to \npinMode()\n.\n\n\nSyntax\n\nshiftOut(dataPin, clockPin, bitOrder, value)\n\n\nParameters\n\n- dataPin: the pin on which to input each bit (uint8_t);\n\n- clockPin: the pin to toggle to signal a read from dataPin (uint8_t);\n\n- bitOrder: which order to shift in the bits (\nMSBFIRST\n or \nLSBFIRST\n) (uint8_t);\n\n- value: the byte to shift out (uint8_t).\n\n\nReturns\n\nNone\n\n\nExample\n\nPython:\n\n\nfrom wyliodrin import *              # imports wyliodrin module\n\nlatchPin = 8\nclockPin = 12\ndataPin  = 11\n\n# sets pins to output\npinMode (latchPin, OUTPUT)\npinMode (clockPin, OUTPUT)\npinMode (dataPin, OUTPUT)\n\n# set latchPin to low and hold low for as long as you are transmitting\ndigitalWrite(latchPin, LOW) \nshiftOut(dataPin, clockPin, LSBFIRST, 200) # write the value 200\n# return the latch pin high to signal chip that it no longer needs to listen for information\ndigitalWrite(latchPin, HIGH)\n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin');  //imports wyliodrin module\n\nvar latchPin = 8;\nvar clockPin = 12;\nvar dataPin  = 11;\n\n// sets pins to output\nwyliodrin.pinMode (latchPin, wyliodrin.OUTPUT);\nwyliodrin.pinMode (clockPin, wyliodrin.OUTPUT);\nwyliodrin.pinMode (dataPin, wyliodrin.OUTPUT);\n\n// set latchPin to low and hold low for as long as you are transmitting\nwyliodrin.digitalWrite(latchPin, wyliodrin.LOW); \nwyliodrin.shiftOut(dataPin, clockPin, wyliodrin.LSBFIRST, 200); // write the value 200\n// return the latch pin high to signal chip that it no longer needs to listen for information\nwyliodrin.digitalWrite(latchPin, wyliodrin.HIGH);\n\n\n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n          //imports wyliodrin library\n\nint main()\n{\n    uint8_t latchPin = 8;\n    uint8_t clockPin = 12;\n    uint8_t dataPin  = 11;\n\n    // sets pins to output\n    pinMode (latchPin, OUTPUT);\n    pinMode (clockPin, OUTPUT);\n    pinMode (dataPin, OUTPUT);\n\n    // set latchPin to low and hold low for as long as you are transmitting\n    digitalWrite(latchPin, LOW); \n    shiftOut(dataPin, clockPin, LSBFIRST, 200); // write the value 200\n    // return the latch pin high to signal chip that it no longer needs to listen for information\n    digitalWrite(latchPin, HIGH);\n    return 0;\n}", 
            "title": "Peripheral Control"
        }, 
        {
            "location": "/functions/index.html#pinmode", 
            "text": "Description \nConfigures the specified pin to behave either as an input or an output.  Syntax \npinMode (pin, mode)  Parameters \n- pin: the number of the pin whose mode you wish to set (int); \n- mode:  INPUT ,  OUTPUT  (int).  Returns \nNone  Example \nPython:  from wyliodrin import * # imports wyliodrin module\n\npinMode (1, INPUT)      # sets pin 1 as input  \npinMode (2, OUTPUT)     # sets pin 2 as output  JavaScript:  var wyliodrin = require ('wyliodrin');   // imports wyliodrin module\n\nwyliodrin.pinMode (1, wyliodrin.INPUT);  // sets pin 1 as input  \nwyliodrin.pinMode (2, wyliodrin.OUTPUT); // sets pin 2 as output  C/C++:  #include  Wyliodrin.h           //imports wyliodrin library\n\nint main()\n{\n    pinMode (1, INPUT);         // sets pin 1 as input  \n    pinMode (2, OUTPUT);        // sets pin 2 as output\n    return 0;\n}", 
            "title": "pinMode()"
        }, 
        {
            "location": "/functions/index.html#digitalwrite", 
            "text": "Description \nWrite a  HIGH  or a  LOW  value to a digital pin. \nNOTE: If you do not set the pinMode() to  OUTPUT , and connect an LED to a pin, when calling digitalWrite(HIGH), the LED may appear dim. Without explicitly setting pinMode(), on most of the boards, the pin will have enabled the internal pull-up resistor, which acts like a large current-limiting resistor.  Syntax \ndigitalWrite (pin, value)  Parameters \n- pin: the number of the pin you wish to control (int); \n- value:  HIGH ,  LOW  (int).  Returns \nNone  Example \nPython:  from wyliodrin import * # imports wyliodrin module\n\npinMode (1, OUTPUT)    # sets pin 1 as output\ndigitalWrite (1, HIGH) # sets the pin on\ndelay (1000)           # waits for a second\ndigitalWrite (1, LOW)  # sets the pin off  JavaScript:  var wyliodrin = require ('wyliodrin');      // imports wyliodrin module\n\nwyliodrin.pinMode (1, wyliodrin.OUTPUT);    // sets pin 1 as output\nwyliodrin.digitalWrite (1, wyliodrin.HIGH); // sets the pin on\nwyliodrin.delay (1000);                     //waits for a second\nwyliodrin.digitalWrite (1, wyliodrin.LOW);  // sets the pin off  C/C++:  #include  Wyliodrin.h        //imports wyliodrin library\n\nint main()\n{\n    pinMode (1, OUTPUT);     // sets pin 1 as output\n    digitalWrite (1, HIGH);  // sets the pin on\n    delay (1000);            // waits for a second\n    digitalWrite (1, LOW);   // sets the pin off\n    return 0;\n}", 
            "title": "digitalWrite()"
        }, 
        {
            "location": "/functions/index.html#digitalread", 
            "text": "Description \nReads the value from a specified digital pin, either  HIGH  or  LOW .\nNote: If the pin isn't connected to anything, digitalRead() can return either HIGH or LOW (and this can change randomly).  Syntax \ndigitalRead (pin)  Parameters \n- pin: the number of the pin you wish to read (int).    Returns  HIGH  or  LOW  (int)  Example \nPython:  from wyliodrin import *  # imports wyliodrin module\n\npinMode (1, INPUT)       # sets pin 1 as input\nvalue = digitalRead (1)  # reads the input pin and stores the value\nprint value              # prints the value on the screen  JavaScript:  var wyliodrin = require ('wyliodrin');  // imports wyliodrin module\n\nwyliodrin.pinMode (1, wyliodrin.INPUT); // sets pin 1 as input\nvar value = wyliodrin.digitalRead (1);  // reads the input pin and stores the value\nconsole.log (value);                    // prints the value on the screen  C/C++:  #include  Wyliodrin.h         //imports wyliodrin library\n\nint main()\n{\n    int value; \n    pinMode (1, INPUT);       // sets pin 1 as input\n    value = digitalRead (1);  // reads the input pin and stores the value\n    printf( %d\\n , value);    // prints the value on the screen\n    return 0;\n}", 
            "title": "digitalRead()"
        }, 
        {
            "location": "/functions/index.html#analogwrite", 
            "text": "Description \nWrites an analog value ( PWM wave ) to a pin. Can be used to light a LED at varying brightnesses or drive a motor at various speeds. \nNOTE: The frequency of the PWM signal is different depending on the board you are using. We suggest reading the specifications of the board before using PWM signals.  Syntax \nanalogWrite (pin, value)  Parameters \n- pin: the number of the pin you wish to control (int); \n- value: the duty cycle, in the interval [0,255] (int).  Returns \nNone  Example \nPython:  from wyliodrin import *  # imports wyliodrin module\n\npinMode (1, OUTPUT)      # sets pin 1 as output\nfor i in range (0,256):  # i gets values from 0 to 255\n    analogWrite (1, i)   # write value of i on pin 1\n    delay (100)          # waits for 100 milliseconds  JavaScript:  var wyliodrin = require ('wyliodrin');  //imports wyliodrin module\n\nwyliodrin.pinMode (1, OUTPUT);          // sets pin 1 as output\nvar i;\nfor (i = 0; i   256; i++)               // i gets values from 0 to 255\n{\n    wyliodrin.analogWrite (1, i);       // write value of i on pin 1\n    wyliodrin.delay (100);              // waits for 100 milliseconds\n}  C/C++:  #include  Wyliodrin.h           //imports wyliodrin library\n\nint main()\n{\n    int i;\n    pinMode (1, OUTPUT);        // sets pin 1 as output\n    for (i = 0; i   256; i++)   // i gets values from 0 to 255\n    {\n        analogWrite (1, i);     // write value of i on pin 1\n        delay (100);            // waits for 100 milliseconds\n    }\n    return 0;\n}", 
            "title": "analogWrite()"
        }, 
        {
            "location": "/functions/index.html#analogread", 
            "text": "Description \nReads the value from the specified analog pin. The function scales the values to 0-1023 interval. \nNote: If the analog input pin is not connected to anything, the value returned by analogRead() will fluctuate based on a number of factors (e.g. the values of the other analog inputs, how close your hand is to the board etc.).  Syntax \nanalogRead (pin)  Parameters \n- pin: the number of the pin you wish to read (int). \n//imports wyliodrin module Returns \na value in the interval [0,1023] (int)  Example \nPython:  from wyliodrin import *  # imports wyliodrin module\n\nvalue = analogRead (1)   # reads the input pin and stores the value\nprint value              # prints the value on the screen  JavaScript:  var wyliodrin = require ('wyliodrin');  //imports wyliodrin module\n\nvar value = wyliodrin.analogRead (1);   // reads the input pin and stores the value\nconsole.log (value);                    // prints the value on the screen  C/C++:  #include  Wyliodrin.h                   //imports wyliodrin library\n\nint main()\n{\n    int value;\n    value = analogRead (1);             // reads the input pin and stores the value\n    printf ( value is : %d\\n , value);  // prints the value on the screen\n    return 0;\n}", 
            "title": "analogRead()"
        }, 
        {
            "location": "/functions/index.html#analogwriteraw", 
            "text": "Description \nWrites a raw analog value ( PWM wave ) to a pin. Can be used to light a LED at varying brightnesses or drive a motor at various speeds. \nNOTE: The values that can be written to the pin depend on each board.  Syntax \nanalogWriteRaw (pin, value)  Parameters \n- pin: the number of the pin you wish to control (int); \n- value: the raw duty cycle, depends on the board  (int).  Returns \nNone  Example \nPython:  from wyliodrin import *   # imports wyliodrin module\n\npinMode (1, OUTPUT)       # sets pin 1 as output\nfor i in range (0,256):   # i gets values from 0 to 255\n    analogWriteRaw (1, i) # write value of i on pin 1\n    delay (100)   JavaScript:  var wyliodrin = require ('wyliodrin');  //imports wyliodrin module\n\nwyliodrin.pinMode (1, OUTPUT);          // sets pin 1 as output\nvar i;\nfor (i = 0; i   256; i++)               // i gets values from 0 to 255\n{\n    wyliodrin.analogWriteRaw (1, i);    // write value of i on pin 1\n    wyliodrin.delay (100);              // waits for 100 milliseconds\n}  C/C++:  #include  Wyliodrin.h           //imports wyliodrin library\n\nint main()\n{\n    int i;\n    pinMode (1, OUTPUT);        // sets pin 1 as output\n    for (i = 0; i   256; i++)   // i gets values from 0 to 255\n    {\n        analogWriteRaw (1, i);  // write value of i on pin 1\n        delay (100);            // waits for 100 milliseconds\n    }\n    return 0;\n}", 
            "title": "analogWriteRaw()"
        }, 
        {
            "location": "/functions/index.html#analogreadraw", 
            "text": "Description \nReads the raw value from the specified analog pin. The values depend on the board.  Syntax \nanalogReadRaw (pin)  Parameters \n- pin: the number of the pin you wish to read (int).   Returns \na value from an interval depending on the board (int)  Example \nPython:  from wyliodrin import *   # imports wyliodrin module\n\nvalue = analogReadRaw (1) # reads the input pin and stores the raw value\nprint value               # prints the value on the screen  JavaScript:  var wyliodrin = require ('wyliodrin');      //imports wyliodrin module\n\nvar value = wyliodrin.analogReadRaw (1);   // reads the input pin and stores the value\nconsole.log (value);                       // prints the value on the screen  C/C++:  #include  Wyliodrin.h                       //imports wyliodrin library\n\nint main()\n{\n    int value;\n    value = analogReadRaw (1);              // reads the input pin and stores the value\n    printf ( raw value is : %d\\n , value);  // prints the value on the screen\n    return 0;\n}", 
            "title": "analogReadRaw()"
        }, 
        {
            "location": "/functions/index.html#pulsein", 
            "text": "Description \nReads a pulse (either  HIGH  or  LOW ) on a pin. For example, if value is HIGH, pulseIn() waits for the pin to go HIGH, starts timing, then waits for the pin to go LOW and stops timing. Returns the length of the pulse in microseconds.  Syntax \npulseIn (pin, value)   Parameters \n- pin: the number of the pin on which wish to read the pulse (uint8_t); \n- value: type of pulse to read, either HIGH or LOW (uint8_t).   Returns \nthe length of the pulse in microseconds (unsigned long)  Example \nPython:  from wyliodrin import *         # imports wyliodrin module\n\npinMode (1, INPUT)              # sets pin 1 as input\nwhile True:\n    value = pulseIn (1, HIGH)   # reads the microseconds between LOW and HIGH stores the value\n    print value                 # prints the value on the screen  JavaScript:  var wyliodrin = require ('wyliodrin');  //imports wyliodrin module\n\nwyliodrin.pinMode (1, wyliodrin.INPUT); // sets pin 1 as input\nwhile (true)\n{\n    // reads the microseconds between LOW and HIGH stores the value\n    var value = wyliodrin.pulseIn (1, wyliodrin.HIGH); \n    console.log (value);                // prints the value on the screen\n}  C/C++:  #include  Wyliodrin.h               //imports wyliodrin library\n\nint main()\n{\n    unsigned long value;\n    pinMode (1, INPUT);             // sets pin 1 as input\n    while (true)\n    {\n\n        value = pulseIn (1, HIGH); // reads the microseconds between LOW and HIGH stores the value\n        printf ( %d\\n , value);    // prints the value on the screen\n    }\n    return 0;\n}", 
            "title": "pulseIn()"
        }, 
        {
            "location": "/functions/index.html#shiftin", 
            "text": "Description \nShifts in a byte of data one bit at a time. Starts from either the most (the leftmost) or least (the rightmost) significant bit. For each bit, the clock pin is pulled high, the next bit is read from the data line, and then the clock pin is taken low.  Syntax \nshiftIn (dataPin, clockPin, bitOrder)  Parameters \n- dataPin: the pin on which to input each bit (uint8_t); \n- clockPin: the pin to toggle to signal a read from dataPin (uint8_t); \n- bitOrder: which order to shift in the bits ( MSBFIRST  or  LSBFIRST ) (uint8_t).   Returns \nthe value read (uint8_t)  Example \nPython:  from wyliodrin import *     # imports wyliodrin module\n\nlatchPin = 8\nclockPin = 12\ndataPin  = 11\n\npinMode (latchPin, OUTPUT) # sets latch pin as output\n\n# sets pins to input\npinMode (clockPin, INPUT)\npinMode (dataPin, INPUT)\n\n# set latchPin to low and hold low for as long as you are reading\ndigitalWrite(latchPin, LOW)\n\n# read the first byte and store it\nfirstByte = shiftIn(dataPin, clockPin, LSBFIRST)\n\n# return the latch pin high to signal chip that it can send the next byte\ndigitalWrite(latchPin, HIGH)  JavaScript:  var wyliodrin = require ('wyliodrin');  //imports wyliodrin module\n\nvar latchPin = 8;\nvar clockPin = 12;\nvar dataPin  = 11;\n\nwyliodrin.pinMode (latchPin, wyliodrin.OUTPUT); // sets latch pin as output\n\n// sets pins to input\nwyliodrin.pinMode (clockPin, wyliodrin.INPUT);\nwyliodrin.pinMode (dataPin, wyliodrin.INPUT);\n\n// set latchPin to low and hold low for as long as you are reading\nwyliodrin.digitalWrite(latchPin, wyliodrin.LOW);\n\n// read the first byte and store it\nvar firstByte = wyliodrin.shiftIn(dataPin, clockPin, wyliodrin.LSBFIRST);\n\n// return the latch pin high to signal chip that it can send the next byte\nwyliodrin.digitalWrite(latchPin, wyliodrin.HIGH);  C/C++:  #include  Wyliodrin.h           //imports wyliodrin library\n\nint main()\n{\n    uint8_t latchPin = 8;\n    uint8_t clockPin = 12;\n    uint8_t dataPin  = 11;\n\n    uint8_t firstByte;\n\n    pinMode (latchPin, OUTPUT); // sets latch pin as output\n\n    // sets pins to input\n    pinMode (clockPin, INPUT);\n    pinMode (dataPin, INPUT);\n\n    // set latchPin to low and hold low for as long as you are reading\n    digitalWrite(latchPin, LOW);\n\n    // read the first byte and store it\n    firstByte = shiftIn(dataPin, clockPin, LSBFIRST);\n\n    // return the latch pin high to signal chip that it can send the next byte\n    digitalWrite(latchPin, HIGH);\n    return 0;\n}", 
            "title": "shiftIn()"
        }, 
        {
            "location": "/functions/index.html#shiftout", 
            "text": "Description \nShifts out a byte of data one bit at a time. Starts from either the most (the leftmost) or least (the rightmost) significant bit. For each bit, the clock pin is pulled high, the next bit is sent to the data line, and then the clock pin is taken low to indicate that the bit is available. \nNOTE: The  dataPin  and  clockPin  must already be configured as outputs by a call to  pinMode() .  Syntax \nshiftOut(dataPin, clockPin, bitOrder, value)  Parameters \n- dataPin: the pin on which to input each bit (uint8_t); \n- clockPin: the pin to toggle to signal a read from dataPin (uint8_t); \n- bitOrder: which order to shift in the bits ( MSBFIRST  or  LSBFIRST ) (uint8_t); \n- value: the byte to shift out (uint8_t).  Returns \nNone  Example \nPython:  from wyliodrin import *              # imports wyliodrin module\n\nlatchPin = 8\nclockPin = 12\ndataPin  = 11\n\n# sets pins to output\npinMode (latchPin, OUTPUT)\npinMode (clockPin, OUTPUT)\npinMode (dataPin, OUTPUT)\n\n# set latchPin to low and hold low for as long as you are transmitting\ndigitalWrite(latchPin, LOW) \nshiftOut(dataPin, clockPin, LSBFIRST, 200) # write the value 200\n# return the latch pin high to signal chip that it no longer needs to listen for information\ndigitalWrite(latchPin, HIGH)  JavaScript:  var wyliodrin = require ('wyliodrin');  //imports wyliodrin module\n\nvar latchPin = 8;\nvar clockPin = 12;\nvar dataPin  = 11;\n\n// sets pins to output\nwyliodrin.pinMode (latchPin, wyliodrin.OUTPUT);\nwyliodrin.pinMode (clockPin, wyliodrin.OUTPUT);\nwyliodrin.pinMode (dataPin, wyliodrin.OUTPUT);\n\n// set latchPin to low and hold low for as long as you are transmitting\nwyliodrin.digitalWrite(latchPin, wyliodrin.LOW); \nwyliodrin.shiftOut(dataPin, clockPin, wyliodrin.LSBFIRST, 200); // write the value 200\n// return the latch pin high to signal chip that it no longer needs to listen for information\nwyliodrin.digitalWrite(latchPin, wyliodrin.HIGH);  C/C++:  #include  Wyliodrin.h           //imports wyliodrin library\n\nint main()\n{\n    uint8_t latchPin = 8;\n    uint8_t clockPin = 12;\n    uint8_t dataPin  = 11;\n\n    // sets pins to output\n    pinMode (latchPin, OUTPUT);\n    pinMode (clockPin, OUTPUT);\n    pinMode (dataPin, OUTPUT);\n\n    // set latchPin to low and hold low for as long as you are transmitting\n    digitalWrite(latchPin, LOW); \n    shiftOut(dataPin, clockPin, LSBFIRST, 200); // write the value 200\n    // return the latch pin high to signal chip that it no longer needs to listen for information\n    digitalWrite(latchPin, HIGH);\n    return 0;\n}", 
            "title": "shiftOut()"
        }, 
        {
            "location": "/timing/index.html", 
            "text": "millis()\n\n\nDescription\n\nReturns the number of milliseconds since the board began running the current program. This number will overflow (go back to zero), after approximately 50 days.\n\n\nSyntax\n\nmillis ()\n\n\nParameters\n\nNone\n\n\nReturns\n\nnumber of milliseconds since the program started (unsigned int)\n\n\nExample\n\nPython:\n\n\nfrom wyliodrin import *  # imports wyliodrin module\n\ndelay (1000)             # waits for one second\ntime = millis ()         # gets the milliseconds since the program started and stores the number\nprint (time)             # prints the stored value on the screen\n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin'); //imports wyliodrin module\n\nwyliodrin.delay (1000);                // waits for one second\nvar time = wyliodrin.millis ();        // gets the milliseconds since the program started and stores the number\nconsole.log (time)                     // prints the stored value on the screen\n\n\n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n      //imports wyliodrin library\n\nint main()\n{\n    unsigned int time;\n    delay (1000);           // waits for one second\n    time = millis ();       // gets the milliseconds since the program started and stores the number\n    printf (\n%d\\n\n, time);  // prints the stored value on the screen\n    return 0;\n}\n\n\n\n\nmicros()\n\n\nDescription\n\nReturns the number of microseconds since the board began running the current program. This number will overflow (go back to zero), after approximately 70 minutes.\n\n\nSyntax\n\nmicros ()\n\n\nParameters\n\nNone\n\n\nReturns\n\nnumber of microseconds since the program started (unsigned long)\n\n\nExample\n\nPython:\n\n\nfrom wyliodrin import *  # imports wyliodrin module\n\ndelay (1000)             # waits for one second\ntime = micros ()         # gets the microseconds since the program started and stores the number\nprint (time)             # prints the stored value on the screen\n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin'); //imports wyliodrin module\n\nwyliodrin.delay (1000);                // waits for one second\nvar time = wyliodrin.micros ();        // gets the milliseconds since the program started and stores the number\nconsole.log (time)                     // prints the stored value on the screen\n\n\n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n      //imports wyliodrin library\n\nint main()\n{\n    unsigned int time;\n    delay (1000);           // waits for one second\n    time = micros ();       // gets the milliseconds since the program started and stores the number\n    printf (\n%d\\n\n, time);  // prints the stored value on the screen\n    return 0;\n}\n\n\n\n\ndelay()\n\n\nDescription\n\nPauses the program for the amount of time (in milliseconds) specified as parameter. \n\n\nSyntax\n\ndelay (ms)\n\n\nParameters\n\nms: the number of milliseconds to pause (unsigned int).\n\n\nReturns\n\nNone\n\n\nExample\n\nPython:\n\n\nfrom wyliodrin import * # imports wyliodrin module\n\npinMode (1, OUTPUT)    # sets pin 1 as output\ndigitalWrite (1, HIGH) # sets the pin on\ndelay (1000)           # waits for a second\ndigitalWrite (1, LOW)  # sets the pin off\n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin');      //imports wyliodrin module\n\nwyliodrin.pinMode (1, wyliodrin.OUTPUT);    // sets pin 1 as output\nwyliodrin.digitalWrite (1, wyliodrin.HIGH); // sets the pin on\nwyliodrin.delay (1000);                     // waits for a second\nwyliodrin.digitalWrite (1, wyliodrin.LOW);  // sets the pin off\n\n\n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n      //imports wyliodrin library\n\nint main()\n{\n    pinMode (1, OUTPUT);    // sets pin 1 as output\n    digitalWrite (1, HIGH); // sets the pin on\n    delay (1000);           // waits for a second\n    digitalWrite (1, LOW);  // sets the pin off\n    return 0;\n}\n\n\n\n\ndelayMicroseconds()\n\n\nDescription\n\nPauses the program for the amount of time (in microseconds) specified as parameter. \n\n\nSyntax\n\ndelayMicroseconds (us)\n\n\nParameters\n\nus: the number of microseconds to pause (unsigned int).\n\n\nReturns\n\nNone\n\n\nExample\n\nPython:\n\n\nfrom wyliodrin import *     # imports wyliodrin module\n\npinMode (1, OUTPUT)         # sets pin 1 as output\ndigitalWrite (1, HIGH)      # sets the pin on\ndelayMicroseconds (10000)   # waits for 10 milliseconds\ndigitalWrite (1, LOW)       # sets the pin off\n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin');      //imports wyliodrin module\n\nwyliodrin.pinMode (1, wyliodrin.OUTPUT);    // sets pin 1 as output\nwyliodrin.digitalWrite (1, wyliodrin.HIGH); // sets the pin on\nwyliodrin.delayMicroseconds (10000);        // waits for 10 milliseconds\nwyliodrin.digitalWrite (1, wyliodrin.LOW);  // sets the pin off\n\n\n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n         //imports wyliodrin library\n\nint main()\n{\n    pinMode (1, OUTPUT);       // sets pin 1 as output\n    digitalWrite (1, HIGH);    // sets the pin on\n    delayMicroseconds (10000); // waits for 10 milliseconds\n    digitalWrite (1, LOW);     // sets the pin off\n    return 0;\n}", 
            "title": "Time"
        }, 
        {
            "location": "/timing/index.html#millis", 
            "text": "Description \nReturns the number of milliseconds since the board began running the current program. This number will overflow (go back to zero), after approximately 50 days.  Syntax \nmillis ()  Parameters \nNone  Returns \nnumber of milliseconds since the program started (unsigned int)  Example \nPython:  from wyliodrin import *  # imports wyliodrin module\n\ndelay (1000)             # waits for one second\ntime = millis ()         # gets the milliseconds since the program started and stores the number\nprint (time)             # prints the stored value on the screen  JavaScript:  var wyliodrin = require ('wyliodrin'); //imports wyliodrin module\n\nwyliodrin.delay (1000);                // waits for one second\nvar time = wyliodrin.millis ();        // gets the milliseconds since the program started and stores the number\nconsole.log (time)                     // prints the stored value on the screen  C/C++:  #include  Wyliodrin.h       //imports wyliodrin library\n\nint main()\n{\n    unsigned int time;\n    delay (1000);           // waits for one second\n    time = millis ();       // gets the milliseconds since the program started and stores the number\n    printf ( %d\\n , time);  // prints the stored value on the screen\n    return 0;\n}", 
            "title": "millis()"
        }, 
        {
            "location": "/timing/index.html#micros", 
            "text": "Description \nReturns the number of microseconds since the board began running the current program. This number will overflow (go back to zero), after approximately 70 minutes.  Syntax \nmicros ()  Parameters \nNone  Returns \nnumber of microseconds since the program started (unsigned long)  Example \nPython:  from wyliodrin import *  # imports wyliodrin module\n\ndelay (1000)             # waits for one second\ntime = micros ()         # gets the microseconds since the program started and stores the number\nprint (time)             # prints the stored value on the screen  JavaScript:  var wyliodrin = require ('wyliodrin'); //imports wyliodrin module\n\nwyliodrin.delay (1000);                // waits for one second\nvar time = wyliodrin.micros ();        // gets the milliseconds since the program started and stores the number\nconsole.log (time)                     // prints the stored value on the screen  C/C++:  #include  Wyliodrin.h       //imports wyliodrin library\n\nint main()\n{\n    unsigned int time;\n    delay (1000);           // waits for one second\n    time = micros ();       // gets the milliseconds since the program started and stores the number\n    printf ( %d\\n , time);  // prints the stored value on the screen\n    return 0;\n}", 
            "title": "micros()"
        }, 
        {
            "location": "/timing/index.html#delay", 
            "text": "Description \nPauses the program for the amount of time (in milliseconds) specified as parameter.   Syntax \ndelay (ms)  Parameters \nms: the number of milliseconds to pause (unsigned int).  Returns \nNone  Example \nPython:  from wyliodrin import * # imports wyliodrin module\n\npinMode (1, OUTPUT)    # sets pin 1 as output\ndigitalWrite (1, HIGH) # sets the pin on\ndelay (1000)           # waits for a second\ndigitalWrite (1, LOW)  # sets the pin off  JavaScript:  var wyliodrin = require ('wyliodrin');      //imports wyliodrin module\n\nwyliodrin.pinMode (1, wyliodrin.OUTPUT);    // sets pin 1 as output\nwyliodrin.digitalWrite (1, wyliodrin.HIGH); // sets the pin on\nwyliodrin.delay (1000);                     // waits for a second\nwyliodrin.digitalWrite (1, wyliodrin.LOW);  // sets the pin off  C/C++:  #include  Wyliodrin.h       //imports wyliodrin library\n\nint main()\n{\n    pinMode (1, OUTPUT);    // sets pin 1 as output\n    digitalWrite (1, HIGH); // sets the pin on\n    delay (1000);           // waits for a second\n    digitalWrite (1, LOW);  // sets the pin off\n    return 0;\n}", 
            "title": "delay()"
        }, 
        {
            "location": "/timing/index.html#delaymicroseconds", 
            "text": "Description \nPauses the program for the amount of time (in microseconds) specified as parameter.   Syntax \ndelayMicroseconds (us)  Parameters \nus: the number of microseconds to pause (unsigned int).  Returns \nNone  Example \nPython:  from wyliodrin import *     # imports wyliodrin module\n\npinMode (1, OUTPUT)         # sets pin 1 as output\ndigitalWrite (1, HIGH)      # sets the pin on\ndelayMicroseconds (10000)   # waits for 10 milliseconds\ndigitalWrite (1, LOW)       # sets the pin off  JavaScript:  var wyliodrin = require ('wyliodrin');      //imports wyliodrin module\n\nwyliodrin.pinMode (1, wyliodrin.OUTPUT);    // sets pin 1 as output\nwyliodrin.digitalWrite (1, wyliodrin.HIGH); // sets the pin on\nwyliodrin.delayMicroseconds (10000);        // waits for 10 milliseconds\nwyliodrin.digitalWrite (1, wyliodrin.LOW);  // sets the pin off  C/C++:  #include  Wyliodrin.h          //imports wyliodrin library\n\nint main()\n{\n    pinMode (1, OUTPUT);       // sets pin 1 as output\n    digitalWrite (1, HIGH);    // sets the pin on\n    delayMicroseconds (10000); // waits for 10 milliseconds\n    digitalWrite (1, LOW);     // sets the pin off\n    return 0;\n}", 
            "title": "delayMicroseconds()"
        }, 
        {
            "location": "/math/index.html", 
            "text": "map()\n\n\nDescription\n\nRe-maps a number from one range to another.  \n\n\nSyntax\n\nmap (value, fromLow, fromHigh, toLow, toHigh)\n\n\nParameters\n\n- value: the number to map (long);\n\n- fromLow: the lower bound of the value's current range (long);\n\n- fromHigh: the upper bound of the value's current range (long);\n\n- toLow: the lower bound of the value's target range (long);\n\n- toHigh: the upper bound of the value's target range (long).\n\n\nReturns\n\nthe mapped value (long)\n\n\nExample\n\nPython:\n\n\nfrom wyliodrin import *         # imports wyliodrin module\n\nval = analogRead(0)             # reads an analog value 0-1023\nval = map(val, 0, 1023, 0, 255) # maps the value to an interval 0-255\nanalogWrite(9, val)             # writes the value on a PWM pin\n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin'); //imports wyliodrin module\n\nvar val = wyliodrin.analogRead(0);             // reads an analog value 0-1023\nval = wyliodrin.map(val, 0, 1023, 0, 255);     // maps the value to an interval 0-255\nwyliodrin.analogWrite(9, val);                 // writes the value on a PWM pin\n\n\n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n         //imports wyliodrin library\n\nint main()\n{\n    int val;\n    val = analogRead(0);               // reads an analog value 0-1023\n    val = map(val, 0, 1023, 0, 255);   // maps the value to an interval 0-255\n    analogWrite(9, val);               // writes the value on a PWM pin\n    return 0;\n}", 
            "title": "Math"
        }, 
        {
            "location": "/math/index.html#map", 
            "text": "Description \nRe-maps a number from one range to another.    Syntax \nmap (value, fromLow, fromHigh, toLow, toHigh)  Parameters \n- value: the number to map (long); \n- fromLow: the lower bound of the value's current range (long); \n- fromHigh: the upper bound of the value's current range (long); \n- toLow: the lower bound of the value's target range (long); \n- toHigh: the upper bound of the value's target range (long).  Returns \nthe mapped value (long)  Example \nPython:  from wyliodrin import *         # imports wyliodrin module\n\nval = analogRead(0)             # reads an analog value 0-1023\nval = map(val, 0, 1023, 0, 255) # maps the value to an interval 0-255\nanalogWrite(9, val)             # writes the value on a PWM pin  JavaScript:  var wyliodrin = require ('wyliodrin'); //imports wyliodrin module\n\nvar val = wyliodrin.analogRead(0);             // reads an analog value 0-1023\nval = wyliodrin.map(val, 0, 1023, 0, 255);     // maps the value to an interval 0-255\nwyliodrin.analogWrite(9, val);                 // writes the value on a PWM pin  C/C++:  #include  Wyliodrin.h          //imports wyliodrin library\n\nint main()\n{\n    int val;\n    val = analogRead(0);               // reads an analog value 0-1023\n    val = map(val, 0, 1023, 0, 255);   // maps the value to an interval 0-255\n    analogWrite(9, val);               // writes the value on a PWM pin\n    return 0;\n}", 
            "title": "map()"
        }, 
        {
            "location": "/bits/index.html", 
            "text": "highByte()\n\n\nDescription\n\nExtracts the high-order (leftmost) byte of a word (or the second lowest byte of a larger data type).\n\n\nSyntax\n\nhighByte (x)\n\n\nParameters\n\n- x: any value (unsigned int).  \n\n\nReturns\n\nthe byte (uint8_t)\n\n\nExample\n\nPython:\n\n\nfrom wyliodrin import *     # imports wyliodrin module\n\nval = highByte (1500)       # gets the high byte of 1500 and stores it\nprint val                   # prints the value on the screen\n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin');  //imports wyliodrin module\n\nvar val = highByte (1500);              // gets the high byte of 1500 and stores it\nconsole.log (val);                      // prints the value on the screen\n\n\n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n      //imports wyliodrin library\n\nint main()\n{\n    uint8_t val;\n    val = highByte (1500);  // gets the high byte of 1500 and stores it\n    printf (\n%d\\n\nval);     // prints the value on the screen\n    return 0;\n}\n\n\n\n\nlowByte()\n\n\nDescription\n\nExtracts the low-order (rightmost) byte of a variable.\n\n\nSyntax\n\nlowByte (x)\n\n\nParameters\n\n- x: any value (unsigned int).  \n\n\nReturns\n\nthe byte (uint8_t)\n\n\nExample\n\nPython:\n\n\nfrom wyliodrin import *     # imports wyliodrin module\n\nval = lowByte (1500)        # gets the low byte of 1500 and stores it\nprint val                   # prints the value on the screen\n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin');  //imports wyliodrin module\n\nvar val = lowByte (1500);               // gets the low byte of 1500 and stores it\nconsole.log (val);                      // prints the value on the screen\n\n\n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n      //imports wyliodrin library\n\nint main()\n{\n    uint8_t val;\n    val = lowByte (1500);   // gets the low byte of 1500 and stores it\n    printf (\n%d\\n\nval);     // prints the value on the screen\n    return 0;\n}\n\n\n\n\nbitRead()\n\n\nDescription\n\nReads a bit of a number.\n\n\nSyntax\n\nbitRead (x, n)\n\n\nParameters\n\n- x: the number from which to read (unsigned int);\n\n- n: which bit to read, starting at 0 for the least-significant (rightmost) bit (unsigned int).\n\n\nReturns\n\nthe value of the bit (0 or 1) (unsigned int)\n\n\nExample\n\nPython:\n\n\nfrom wyliodrin import *     # imports wyliodrin module\n\nval = bitRead (1500, 3)     # gets the fourth bit of 1500 and stores it\nprint val                   # prints the value (1) on the screen\n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin');  //imports wyliodrin module\n\nvar val = bitRead (1500, 3);            // gets the fourth bit of 1500 and stores it\nconsole.log (val);                      // prints the value (1) on the screen\n\n\n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n       //imports wyliodrin library\n\nint main()\n{\n    uint8_t val;\n    val = bitRead (1500, 3); // gets the low byte of 1500 and stores it\n    printf (\n%u\\n\nval);      // prints the value on the screen\n    return 0;\n}\n\n\n\n\nbitWrite()\n\n\nDescription\n\nReceives a value and returns a new one with the specified bit set to the given numeric value.\n\n\nSyntax\n\nbitWrite (x, n, b)\n\n\nParameters\n\n- x: the numeric variable to which to write (unsigned int);\n\n- n: which bit of the number to write, starting at 0 for the least-significant (rightmost) bit (unsigned int);\n\n- b: the value to write to the bit, 0 or 1 (unsigned int).\n\n\nReturns\n\nthe new value (unsigned int)\n\n\nExample\n\nPython:\n\n\nfrom wyliodrin import *     # imports wyliodrin module\n\nval = bitWrite (1500, 0, 1) # writes 1 on bit 0 and stores the new value\nprint val                   # prints the new value (1501) on the screen\n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin');  //imports wyliodrin module\n\nvar val = bitRead (1500, 0, 1);         // writes 1 on bit 0 and stores the new value\nconsole.log (val);                      // prints the value (1501) on the screen\n\n\n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n           //imports wyliodrin library\n\nint main()\n{\n    uint8_t val;\n    val = bitRead (1500, 0, 1); // writes 1 on bit 0 and stores the new value\n    printf (\n%u\\n\nval);         // prints the value on the screen\n    return 0;\n}\n\n\n\n\nbitSet()\n\n\nDescription\n\nReceives a value and returns a new one with the specified bit set to 1.\n\n\nSyntax\n\nbitSet (x, n)\n\n\nParameters\n\n- x: the numeric variable whose bit to set (unsigned int);\n\n- n: which bit to set, starting at 0 for the least-significant (rightmost) bit (unsigned int).\n\n\nReturns\n\nthe new value (unsigned int)\n\n\nExample\n\nPython:\n\n\nfrom wyliodrin import *     # imports wyliodrin module\n\nval = bitSet (1500, 0)      # writes 1 on bit 0 and stores the new value\nprint val                   # prints the new value (1501) on the screen\n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin');  //imports wyliodrin module\n\nvar val = bitSet (1500, 0);             // writes 1 on bit 0 and stores the new value\nconsole.log (val);                      // prints the value (1501) on the screen\n\n\n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n           //imports wyliodrin library\n\nint main()\n{\n    uint8_t val;\n    val = bitRead (1500, 0);    // writes 1 on bit 0 and stores the new value\n    printf (\n%u\\n\nval);         // prints the value on the screen\n    return 0;\n}\n\n\n\n\nbitClear()\n\n\nDescription\n\nReceives a value and returns a new one with the specified bit cleared (set to 0).\n\n\nSyntax\n\nbitClear (x, n)\n\n\nParameters\n\n- x: the numeric variable whose bit to clear (unsigned int);\n\n- n: which bit to clear, starting at 0 for the least-significant (rightmost) bit (unsigned int).\n\n\nReturns\n\nthe new value (unsigned int)\n\n\nExample\n\nPython:\n\n\nfrom wyliodrin import *     # imports wyliodrin module\n\nval = bitClear (1501, 0)    # writes 0 on bit 0 and stores the new value\nprint val                   # prints the new value (1500) on the screen\n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin');  //imports wyliodrin module\n\nvar val = bitSet (1501, 0);             // writes 0 on bit 0 and stores the new value\nconsole.log (val);                      // prints the value (1500) on the screen\n\n\n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n           //imports wyliodrin library\n\nint main()\n{\n    uint8_t val;\n    val = bitRead (1501, 0);    // writes 0 on bit 0 and stores the new value\n    printf (\n%u\\n\nval);         // prints the value on the screen\n    return 0;\n}\n\n\n\n\nbit()\n\n\nDescription\n\nComputes the value of the specified bit (bit 0 is 1, bit 1 is 2, bit 2 is 4 etc.).\n\n\nSyntax\n\nbit (n)\n\n\nParameters\n\n- n: the bit whose value to compute (int).\n\n\nReturns\n\nthe value of the bit (unsigned int)\n\n\nExample\n\nPython:\n\n\nfrom wyliodrin import *     # imports wyliodrin module\n\nval = bit (7)               # computes and stores the new value\nprint val                   # prints the new value (128) on the screen\n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin');  //imports wyliodrin module\n\nvar val = bit (7);                      // computes and stores the new value\nconsole.log (val);                      // prints the value (128) on the screen\n\n\n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n  //imports wyliodrin library\n\nint main()\n{\n    uint8_t val;\n    val = bit (7);      // computes and stores the new value\n    printf (\n%u\\n\nval); // prints the value on the screen\n    return 0;\n}", 
            "title": "Bits and Bytes"
        }, 
        {
            "location": "/bits/index.html#highbyte", 
            "text": "Description \nExtracts the high-order (leftmost) byte of a word (or the second lowest byte of a larger data type).  Syntax \nhighByte (x)  Parameters \n- x: any value (unsigned int).    Returns \nthe byte (uint8_t)  Example \nPython:  from wyliodrin import *     # imports wyliodrin module\n\nval = highByte (1500)       # gets the high byte of 1500 and stores it\nprint val                   # prints the value on the screen  JavaScript:  var wyliodrin = require ('wyliodrin');  //imports wyliodrin module\n\nvar val = highByte (1500);              // gets the high byte of 1500 and stores it\nconsole.log (val);                      // prints the value on the screen  C/C++:  #include  Wyliodrin.h       //imports wyliodrin library\n\nint main()\n{\n    uint8_t val;\n    val = highByte (1500);  // gets the high byte of 1500 and stores it\n    printf ( %d\\n val);     // prints the value on the screen\n    return 0;\n}", 
            "title": "highByte()"
        }, 
        {
            "location": "/bits/index.html#lowbyte", 
            "text": "Description \nExtracts the low-order (rightmost) byte of a variable.  Syntax \nlowByte (x)  Parameters \n- x: any value (unsigned int).    Returns \nthe byte (uint8_t)  Example \nPython:  from wyliodrin import *     # imports wyliodrin module\n\nval = lowByte (1500)        # gets the low byte of 1500 and stores it\nprint val                   # prints the value on the screen  JavaScript:  var wyliodrin = require ('wyliodrin');  //imports wyliodrin module\n\nvar val = lowByte (1500);               // gets the low byte of 1500 and stores it\nconsole.log (val);                      // prints the value on the screen  C/C++:  #include  Wyliodrin.h       //imports wyliodrin library\n\nint main()\n{\n    uint8_t val;\n    val = lowByte (1500);   // gets the low byte of 1500 and stores it\n    printf ( %d\\n val);     // prints the value on the screen\n    return 0;\n}", 
            "title": "lowByte()"
        }, 
        {
            "location": "/bits/index.html#bitread", 
            "text": "Description \nReads a bit of a number.  Syntax \nbitRead (x, n)  Parameters \n- x: the number from which to read (unsigned int); \n- n: which bit to read, starting at 0 for the least-significant (rightmost) bit (unsigned int).  Returns \nthe value of the bit (0 or 1) (unsigned int)  Example \nPython:  from wyliodrin import *     # imports wyliodrin module\n\nval = bitRead (1500, 3)     # gets the fourth bit of 1500 and stores it\nprint val                   # prints the value (1) on the screen  JavaScript:  var wyliodrin = require ('wyliodrin');  //imports wyliodrin module\n\nvar val = bitRead (1500, 3);            // gets the fourth bit of 1500 and stores it\nconsole.log (val);                      // prints the value (1) on the screen  C/C++:  #include  Wyliodrin.h        //imports wyliodrin library\n\nint main()\n{\n    uint8_t val;\n    val = bitRead (1500, 3); // gets the low byte of 1500 and stores it\n    printf ( %u\\n val);      // prints the value on the screen\n    return 0;\n}", 
            "title": "bitRead()"
        }, 
        {
            "location": "/bits/index.html#bitwrite", 
            "text": "Description \nReceives a value and returns a new one with the specified bit set to the given numeric value.  Syntax \nbitWrite (x, n, b)  Parameters \n- x: the numeric variable to which to write (unsigned int); \n- n: which bit of the number to write, starting at 0 for the least-significant (rightmost) bit (unsigned int); \n- b: the value to write to the bit, 0 or 1 (unsigned int).  Returns \nthe new value (unsigned int)  Example \nPython:  from wyliodrin import *     # imports wyliodrin module\n\nval = bitWrite (1500, 0, 1) # writes 1 on bit 0 and stores the new value\nprint val                   # prints the new value (1501) on the screen  JavaScript:  var wyliodrin = require ('wyliodrin');  //imports wyliodrin module\n\nvar val = bitRead (1500, 0, 1);         // writes 1 on bit 0 and stores the new value\nconsole.log (val);                      // prints the value (1501) on the screen  C/C++:  #include  Wyliodrin.h            //imports wyliodrin library\n\nint main()\n{\n    uint8_t val;\n    val = bitRead (1500, 0, 1); // writes 1 on bit 0 and stores the new value\n    printf ( %u\\n val);         // prints the value on the screen\n    return 0;\n}", 
            "title": "bitWrite()"
        }, 
        {
            "location": "/bits/index.html#bitset", 
            "text": "Description \nReceives a value and returns a new one with the specified bit set to 1.  Syntax \nbitSet (x, n)  Parameters \n- x: the numeric variable whose bit to set (unsigned int); \n- n: which bit to set, starting at 0 for the least-significant (rightmost) bit (unsigned int).  Returns \nthe new value (unsigned int)  Example \nPython:  from wyliodrin import *     # imports wyliodrin module\n\nval = bitSet (1500, 0)      # writes 1 on bit 0 and stores the new value\nprint val                   # prints the new value (1501) on the screen  JavaScript:  var wyliodrin = require ('wyliodrin');  //imports wyliodrin module\n\nvar val = bitSet (1500, 0);             // writes 1 on bit 0 and stores the new value\nconsole.log (val);                      // prints the value (1501) on the screen  C/C++:  #include  Wyliodrin.h            //imports wyliodrin library\n\nint main()\n{\n    uint8_t val;\n    val = bitRead (1500, 0);    // writes 1 on bit 0 and stores the new value\n    printf ( %u\\n val);         // prints the value on the screen\n    return 0;\n}", 
            "title": "bitSet()"
        }, 
        {
            "location": "/bits/index.html#bitclear", 
            "text": "Description \nReceives a value and returns a new one with the specified bit cleared (set to 0).  Syntax \nbitClear (x, n)  Parameters \n- x: the numeric variable whose bit to clear (unsigned int); \n- n: which bit to clear, starting at 0 for the least-significant (rightmost) bit (unsigned int).  Returns \nthe new value (unsigned int)  Example \nPython:  from wyliodrin import *     # imports wyliodrin module\n\nval = bitClear (1501, 0)    # writes 0 on bit 0 and stores the new value\nprint val                   # prints the new value (1500) on the screen  JavaScript:  var wyliodrin = require ('wyliodrin');  //imports wyliodrin module\n\nvar val = bitSet (1501, 0);             // writes 0 on bit 0 and stores the new value\nconsole.log (val);                      // prints the value (1500) on the screen  C/C++:  #include  Wyliodrin.h            //imports wyliodrin library\n\nint main()\n{\n    uint8_t val;\n    val = bitRead (1501, 0);    // writes 0 on bit 0 and stores the new value\n    printf ( %u\\n val);         // prints the value on the screen\n    return 0;\n}", 
            "title": "bitClear()"
        }, 
        {
            "location": "/bits/index.html#bit", 
            "text": "Description \nComputes the value of the specified bit (bit 0 is 1, bit 1 is 2, bit 2 is 4 etc.).  Syntax \nbit (n)  Parameters \n- n: the bit whose value to compute (int).  Returns \nthe value of the bit (unsigned int)  Example \nPython:  from wyliodrin import *     # imports wyliodrin module\n\nval = bit (7)               # computes and stores the new value\nprint val                   # prints the new value (128) on the screen  JavaScript:  var wyliodrin = require ('wyliodrin');  //imports wyliodrin module\n\nvar val = bit (7);                      // computes and stores the new value\nconsole.log (val);                      // prints the value (128) on the screen  C/C++:  #include  Wyliodrin.h   //imports wyliodrin library\n\nint main()\n{\n    uint8_t val;\n    val = bit (7);      // computes and stores the new value\n    printf ( %u\\n val); // prints the value on the screen\n    return 0;\n}", 
            "title": "bit()"
        }, 
        {
            "location": "/spi/index.html", 
            "text": "SPIClass()\n\n\nDescription\n\nConstructor - creates an SPI object.\n\nNOTE: This function is to be used only in JavaScript and Python.\n\n\nSyntax\n\nSPIClass()\n\n\nParameters\n\nNone\n\n\nReturns\n\nan SPI object\n\n\nExample\n\nPython:\n\n\nfrom wyliodrin import *     # imports wyliodrin module\n\nspi = SPIClass ()           # creates a new SPI instance\n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin');  // imports wyliodrin module\n\nvar spi = new wyliodrin.SPIClass ();    // creates a new SPI instance\n\n\n\n\nbegin()\n\n\nDescription\n\nInitializes the SPI bus by setting SCK, MOSI, and SS to outputs, pulling SCK and MOSI low, and SS high.\n\n\nSyntax\n\nbegin()\n\n\nParameters\n\nNone\n\n\nReturns\n\nNone\n\n\nExample\n\nPython:\n\n\nfrom wyliodrin import *     # imports wyliodrin module\n\nspi = SPIClass ()           # creates a new SPI instance\nspi.begin ()                # initializes the SPI bus\n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin');  // imports wyliodrin module\n\nvar spi = new wyliodrin.SPIClass ();    // creates a new SPI instance\nspi.begin ();                           // initializes the SPI bus\n\n\n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n  //imports wyliodrin library\n\nint main()\n{\n    SPI.begin ();       // initializes the SPI bus\n    return 0;\n}\n\n\n\n\nend()\n\n\nDescription\n\nDisables the SPI bus (leaving pin modes unchanged).\n\n\nSyntax\n\nend()\n\n\nParameters\n\nNone\n\n\nReturns\n\nNone\n\n\nExample\n\nPython:\n\n\nfrom wyliodrin import *     # imports wyliodrin module\n\nspi = SPIClass ()           # creates a new SPI instance\nspi.begin ()                # initializes the SPI bus\nspi.end ()                  # disables the SPI bus\n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin');  // imports wyliodrin module\n\nvar spi = new wyliodrin.SPIClass ();    // creates a new SPI instance\nspi.begin ();                           // initializes the SPI bus\nspi.end ();                             // disables the SPI bus\n\n\n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n  //imports wyliodrin library\n\nint main()\n{\n    SPI.begin ();       // initializes the SPI bus\n    SPI.end ();         // disables the SPI bus\n    return 0;\n}\n\n\n\n\nsetBitOrder()\n\n\nDescription\n\nSets the order of the bits shifted out of and into the SPI bus, either \nLSBFIRST\n or \nMSBFIRST\n.\n\n\nSyntax\n\nsetBitOrder(order)\n\n\nParameters\n\n- order: either \nLSBFIRST\n or \nMSBFIRST\n.\n\n\nReturns\n\nNone\n\n\nExample\n\nPython:\n\n\nfrom wyliodrin import *     # imports wyliodrin module\n\nspi = SPIClass ()           # creates a new SPI instance\nspi.begin ()                # initializes the SPI bus\nspi.setBitOrder (LSBFIRST)  # sets bits order to LSBFIRST\n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin');  // imports wyliodrin module\n\nvar spi = new wyliodrin.SPIClass ();    // creates a new SPI instance\nspi.begin ();                           // initializes the SPI bus\nspi.setBitOrder (wyliodrin.LSBFIRST);   // sets bits order to LSBFIRST\n\n\n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n          //imports wyliodrin library\n\nint main()\n{\n    SPI.begin ();               // initializes the SPI bus\n    SPI.setBitOrder (LSBFIRST); // sets bits order to LSBFIRST\n    return 0;\n}\n\n\n\n\nsetDataMode()\n\n\nDescription\n\nSets the SPI data mode: that is clock polarity and phase.\n\n\nSyntax\n\nsetDataMode(mode)\n\n\nParameters\n\n- mode: \nSPI_MODE0\n, \nSPI_MODE1\n, \nSPI_MODE2\n, \nSPI_MODE3\n.\n\n\nReturns\n\nNone\n\n\nExample\n\nPython:\n\n\nfrom wyliodrin import *     # imports wyliodrin module\n\nspi = SPIClass ()           # creates a new SPI instance\nspi.begin ()                # initializes the SPI bus\nspi.setDataMode (SPI_MODE0) # sets data mode to SPI_MODE0\n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin');  // imports wyliodrin module\n\nvar spi = new wyliodrin.SPIClass ();    // creates a new SPI instance\nspi.begin ();                           // initializes the SPI bus\nspi.setDataMode (wyliodrin.SPI_MODE0);  // sets data mode to SPI_MODE0\n\n\n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n           //imports wyliodrin library\n\nint main()\n{\n    SPI.begin ();                // initializes the SPI bus\n    SPI.setDataMode (SPI_MODE0); // sets data mode to SPI_MODE0\n    return 0;\n}\n\n\n\n\nsetClockDivider()\n\n\nDescription\n\nSets the SPI clock divider relative to the system clock. On AVR based boards, the dividers available are 2, 4, 8, 16, 32, 64 or 128. The default setting is SPI_CLOCK_DIV4, which sets the SPI clock to one-quarter the frequency of the system clock.\n\n\nSyntax\n\nsetClockDivider(divider)\n\n\nParameters\n\n- divider: \nSPI_CLOCK_DIV2\n,  \nSPI_CLOCK_DIV4\n, \nSPI_CLOCK_DIV8\n, \nSPI_CLOCK_DIV16\n, \nSPI_CLOCK_DIV32\n, \nSPI_CLOCK_DIV64\n, \nSPI_CLOCK_DIV128\n.\n\n\nReturns\n\nNone\n\n\nExample\n\nPython:\n\n\nfrom wyliodrin import *                 # imports wyliodrin module\n\nspi = SPIClass ()                       # creates a new SPI instance\nspi.begin ()                            # initializes the SPI bus\nspi.setClockDivider (SPI_CLOCK_DIV2)    # sets clock divider to SPI_CLOCK_DIV2\n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin');          // imports wyliodrin module\n\nvar spi = new wyliodrin.SPIClass ();            // creates a new SPI instance\nspi.begin ();                                   // initializes the SPI bus\nspi.setClockDivider (wyliodrin.SPI_CLOCK_DIV2); // sets clock divider to SPI_CLOCK_DIV2\n\n\n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n                      //imports wyliodrin library\n\nint main()\n{\n    SPI.begin ();                           // initializes the SPI bus\n    SPI.setClockDivider (SPI_CLOCK_DIV2);   // sets clock divider to SPI_CLOCK_DIV2\n    return 0;\n}\n\n\n\n\ntransfer()\n\n\nDescription\n\nSPI transfer is based on a simultaneous send and receive: the received data is returned.\n\n\nSyntax\n\ntransfer(data)\n\n\nParameters\n\n- data: the byte to send out over the bus (uint8_t).\n\n\nReturns\n\nthe received data (uint8_t)\n\n\nExample\n\nPython:\n\n\nfrom wyliodrin import *           # imports wyliodrin module\n\nspi = SPIClass ()                 # creates a new SPI instance\nspi.begin ()                      # initializes the SPI bus\ndata = 'a'\nreceivedVal = spi.transfer (data) # sends the 'a' character and recevies a value over the spi bus\nprint receivedVal                 # prints the received value\n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin');  // imports wyliodrin module\n\nvar spi = new wyliodrin.SPIClass ();    // creates a new SPI instance\nspi.begin ();                           // initializes the SPI bus\ndata = 'a';\nreceivedVal = spi.transfer (data);      // sends the 'a' character and recevies a value over the spi bus\nconsole.log (receivedVal);              // prints the received value\n\n\n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n                  //imports wyliodrin library\n\nint main()\n{\n    uint8_t data;\n    uint8_t receivedVal;\n    SPI.begin ();                       // initializes the SPI bus\n    data = 'a';\n    // sends the 'a' character and recevies a value over the spi bus\n    receivedVal = spi.transfer (data); \n    printf (\n%u\\n\n, receivedVal);       // prints the received value\n    return 0;\n}\n\n\n\n\ntransferBuffer()\n\n\nDescription\n\nTransfers SPI data (sends and receives) using buffers.\n\nNOTE: This function can only be used in C/C++.\n\n\nSyntax\n\ntransferBuffer(data)\n\n\nParameters\n\n- txData: the buffer containing the data to be sent (uint8_t \n);\n\n- rxData: the buffer in which the received data is stored (uint8_t \n);\n\n- len:    the size of the buffers (uint32_t);  \n\n\nReturns\n\nNone\n\n\nExample\n  \n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n                  //imports wyliodrin library\n\nint main()\n{\n    uint8_t data [3] = \nabc\n;\n    uint8_t received [3];\n    SPI.begin ();                       // initializes the SPI bus\n    // sends the \nabc\n string and recevies data over the spi bus\n    SPI.transfer (\ndata, \nreceived, 3); \n    printf (\n%s\\n\n, receivedVal);       // prints the received value\n    return 0;\n}", 
            "title": "SPI Communication"
        }, 
        {
            "location": "/spi/index.html#spiclass", 
            "text": "Description \nConstructor - creates an SPI object. \nNOTE: This function is to be used only in JavaScript and Python.  Syntax \nSPIClass()  Parameters \nNone  Returns \nan SPI object  Example \nPython:  from wyliodrin import *     # imports wyliodrin module\n\nspi = SPIClass ()           # creates a new SPI instance  JavaScript:  var wyliodrin = require ('wyliodrin');  // imports wyliodrin module\n\nvar spi = new wyliodrin.SPIClass ();    // creates a new SPI instance", 
            "title": "SPIClass()"
        }, 
        {
            "location": "/spi/index.html#begin", 
            "text": "Description \nInitializes the SPI bus by setting SCK, MOSI, and SS to outputs, pulling SCK and MOSI low, and SS high.  Syntax \nbegin()  Parameters \nNone  Returns \nNone  Example \nPython:  from wyliodrin import *     # imports wyliodrin module\n\nspi = SPIClass ()           # creates a new SPI instance\nspi.begin ()                # initializes the SPI bus  JavaScript:  var wyliodrin = require ('wyliodrin');  // imports wyliodrin module\n\nvar spi = new wyliodrin.SPIClass ();    // creates a new SPI instance\nspi.begin ();                           // initializes the SPI bus  C/C++:  #include  Wyliodrin.h   //imports wyliodrin library\n\nint main()\n{\n    SPI.begin ();       // initializes the SPI bus\n    return 0;\n}", 
            "title": "begin()"
        }, 
        {
            "location": "/spi/index.html#end", 
            "text": "Description \nDisables the SPI bus (leaving pin modes unchanged).  Syntax \nend()  Parameters \nNone  Returns \nNone  Example \nPython:  from wyliodrin import *     # imports wyliodrin module\n\nspi = SPIClass ()           # creates a new SPI instance\nspi.begin ()                # initializes the SPI bus\nspi.end ()                  # disables the SPI bus  JavaScript:  var wyliodrin = require ('wyliodrin');  // imports wyliodrin module\n\nvar spi = new wyliodrin.SPIClass ();    // creates a new SPI instance\nspi.begin ();                           // initializes the SPI bus\nspi.end ();                             // disables the SPI bus  C/C++:  #include  Wyliodrin.h   //imports wyliodrin library\n\nint main()\n{\n    SPI.begin ();       // initializes the SPI bus\n    SPI.end ();         // disables the SPI bus\n    return 0;\n}", 
            "title": "end()"
        }, 
        {
            "location": "/spi/index.html#setbitorder", 
            "text": "Description \nSets the order of the bits shifted out of and into the SPI bus, either  LSBFIRST  or  MSBFIRST .  Syntax \nsetBitOrder(order)  Parameters \n- order: either  LSBFIRST  or  MSBFIRST .  Returns \nNone  Example \nPython:  from wyliodrin import *     # imports wyliodrin module\n\nspi = SPIClass ()           # creates a new SPI instance\nspi.begin ()                # initializes the SPI bus\nspi.setBitOrder (LSBFIRST)  # sets bits order to LSBFIRST  JavaScript:  var wyliodrin = require ('wyliodrin');  // imports wyliodrin module\n\nvar spi = new wyliodrin.SPIClass ();    // creates a new SPI instance\nspi.begin ();                           // initializes the SPI bus\nspi.setBitOrder (wyliodrin.LSBFIRST);   // sets bits order to LSBFIRST  C/C++:  #include  Wyliodrin.h           //imports wyliodrin library\n\nint main()\n{\n    SPI.begin ();               // initializes the SPI bus\n    SPI.setBitOrder (LSBFIRST); // sets bits order to LSBFIRST\n    return 0;\n}", 
            "title": "setBitOrder()"
        }, 
        {
            "location": "/spi/index.html#setdatamode", 
            "text": "Description \nSets the SPI data mode: that is clock polarity and phase.  Syntax \nsetDataMode(mode)  Parameters \n- mode:  SPI_MODE0 ,  SPI_MODE1 ,  SPI_MODE2 ,  SPI_MODE3 .  Returns \nNone  Example \nPython:  from wyliodrin import *     # imports wyliodrin module\n\nspi = SPIClass ()           # creates a new SPI instance\nspi.begin ()                # initializes the SPI bus\nspi.setDataMode (SPI_MODE0) # sets data mode to SPI_MODE0  JavaScript:  var wyliodrin = require ('wyliodrin');  // imports wyliodrin module\n\nvar spi = new wyliodrin.SPIClass ();    // creates a new SPI instance\nspi.begin ();                           // initializes the SPI bus\nspi.setDataMode (wyliodrin.SPI_MODE0);  // sets data mode to SPI_MODE0  C/C++:  #include  Wyliodrin.h            //imports wyliodrin library\n\nint main()\n{\n    SPI.begin ();                // initializes the SPI bus\n    SPI.setDataMode (SPI_MODE0); // sets data mode to SPI_MODE0\n    return 0;\n}", 
            "title": "setDataMode()"
        }, 
        {
            "location": "/spi/index.html#setclockdivider", 
            "text": "Description \nSets the SPI clock divider relative to the system clock. On AVR based boards, the dividers available are 2, 4, 8, 16, 32, 64 or 128. The default setting is SPI_CLOCK_DIV4, which sets the SPI clock to one-quarter the frequency of the system clock.  Syntax \nsetClockDivider(divider)  Parameters \n- divider:  SPI_CLOCK_DIV2 ,   SPI_CLOCK_DIV4 ,  SPI_CLOCK_DIV8 ,  SPI_CLOCK_DIV16 ,  SPI_CLOCK_DIV32 ,  SPI_CLOCK_DIV64 ,  SPI_CLOCK_DIV128 .  Returns \nNone  Example \nPython:  from wyliodrin import *                 # imports wyliodrin module\n\nspi = SPIClass ()                       # creates a new SPI instance\nspi.begin ()                            # initializes the SPI bus\nspi.setClockDivider (SPI_CLOCK_DIV2)    # sets clock divider to SPI_CLOCK_DIV2  JavaScript:  var wyliodrin = require ('wyliodrin');          // imports wyliodrin module\n\nvar spi = new wyliodrin.SPIClass ();            // creates a new SPI instance\nspi.begin ();                                   // initializes the SPI bus\nspi.setClockDivider (wyliodrin.SPI_CLOCK_DIV2); // sets clock divider to SPI_CLOCK_DIV2  C/C++:  #include  Wyliodrin.h                       //imports wyliodrin library\n\nint main()\n{\n    SPI.begin ();                           // initializes the SPI bus\n    SPI.setClockDivider (SPI_CLOCK_DIV2);   // sets clock divider to SPI_CLOCK_DIV2\n    return 0;\n}", 
            "title": "setClockDivider()"
        }, 
        {
            "location": "/spi/index.html#transfer", 
            "text": "Description \nSPI transfer is based on a simultaneous send and receive: the received data is returned.  Syntax \ntransfer(data)  Parameters \n- data: the byte to send out over the bus (uint8_t).  Returns \nthe received data (uint8_t)  Example \nPython:  from wyliodrin import *           # imports wyliodrin module\n\nspi = SPIClass ()                 # creates a new SPI instance\nspi.begin ()                      # initializes the SPI bus\ndata = 'a'\nreceivedVal = spi.transfer (data) # sends the 'a' character and recevies a value over the spi bus\nprint receivedVal                 # prints the received value  JavaScript:  var wyliodrin = require ('wyliodrin');  // imports wyliodrin module\n\nvar spi = new wyliodrin.SPIClass ();    // creates a new SPI instance\nspi.begin ();                           // initializes the SPI bus\ndata = 'a';\nreceivedVal = spi.transfer (data);      // sends the 'a' character and recevies a value over the spi bus\nconsole.log (receivedVal);              // prints the received value  C/C++:  #include  Wyliodrin.h                   //imports wyliodrin library\n\nint main()\n{\n    uint8_t data;\n    uint8_t receivedVal;\n    SPI.begin ();                       // initializes the SPI bus\n    data = 'a';\n    // sends the 'a' character and recevies a value over the spi bus\n    receivedVal = spi.transfer (data); \n    printf ( %u\\n , receivedVal);       // prints the received value\n    return 0;\n}", 
            "title": "transfer()"
        }, 
        {
            "location": "/spi/index.html#transferbuffer", 
            "text": "Description \nTransfers SPI data (sends and receives) using buffers. \nNOTE: This function can only be used in C/C++.  Syntax \ntransferBuffer(data)  Parameters \n- txData: the buffer containing the data to be sent (uint8_t  ); \n- rxData: the buffer in which the received data is stored (uint8_t  ); \n- len:    the size of the buffers (uint32_t);    Returns \nNone  Example     C/C++:  #include  Wyliodrin.h                   //imports wyliodrin library\n\nint main()\n{\n    uint8_t data [3] =  abc ;\n    uint8_t received [3];\n    SPI.begin ();                       // initializes the SPI bus\n    // sends the  abc  string and recevies data over the spi bus\n    SPI.transfer ( data,  received, 3); \n    printf ( %s\\n , receivedVal);       // prints the received value\n    return 0;\n}", 
            "title": "transferBuffer()"
        }, 
        {
            "location": "/i2c/index.html", 
            "text": "TwoWire()\n\n\nDescription\n\nConstructor - creates a Wire object, then calls \nbegin()\n. It also calls the function it receives a parameter once the new object is created.\nNOTE: This function is to be used only in JavaScript and Python.\n\n\nSyntax\n\nTwoWire(callbackFunction)\n\n\nParameters\n\n- callbackFunction: function to be called after the object is created; it takes no parameter and returns nothing.\n\n\nReturns\n\na Wire object\n\n\nExample\n\nPython:\n\n\nfrom wyliodrin import *     # imports wyliodrin module\n\ndef myFunction ():\n    print 'object created'\n\ni2c = TwoWire (myFunction)  # creates a new TwoWire instance\n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin');  // imports wyliodrin module\n\n// creates a new TwoWire instance\nvar i2c = new wyliodrin.TwoWire (function (){\n    console.log ('object created');\n}); \n\n\n\n\nbegin()\n\n\nDescription\n\nInitiate the Wire library and join the I2C bus as a master or slave. This should normally be called only once.\n\n\nSyntax\n\nbegin([address])\n\n\nParameters\n\n- address: the 7-bit slave address (optional); if not specified, join the bus as a master (uint8_t or int).\n\n\nReturns\n\nNone\n\n\nExample\n\nC/C++:\n\n\n#include \nWyliodrin.h\n  // imports wyliodrin library\n\nint main()\n{\n    Wire.begin ();      // joins the I2C bus\n    return 0;\n}\n\n\n\n\nrequestFrom()\n\n\nDescription\n\nUsed by the master to request bytes from a slave device. The bytes may then be retrieved with the \navailable()\n and \nread()\n functions. \n\n\nrequestFrom() accepts a numeric argument changing its behavior for compatibility with certain I2C devices. If different from 0, requestFrom() sends a stop message after the request, releasing the I2C bus.\n\n\nIf 0, requestFrom() sends a restart message after the request. The bus will not be released, which prevents another master device from requesting between messages. This allows one master device to send multiple requests while in control.\n\n\nThe default value is different from 0.\n\n\nSyntax\n\nrequestFrom(address, quantity, [stop])\n\n\nParameters\n\n- address: the 7-bit address of the device to request bytes from (uint8_t or int);\n\n- quantity: the number of bytes to request (uint8_t or int);\n\n- stop: different from 0 will send a stop message after the request, releasing the bus. 0 will continually send a restart after the request, keeping the connection active.\n\n\nReturns\n\nthe number of bytes returned from the slave device (uint8_t)\n\n\nExample\n\nPython:\n\n\nfrom wyliodrin import *     # imports wyliodrin module\n\ndef myFunction ():\n    print 'object created'\n\ni2c = TwoWire (myFunction)  # creates a new TwoWire instance\ni2c.requestFrom (2,6)       # requests 6 bytes from slave device no. 2\n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin');  // imports wyliodrin module\n\n// creates a new TwoWire instance\nvar i2c = new wyliodrin.TwoWire (function (){\n    console.log ('object created');\n}); \ni2c.requestFrom (2,6);                  // request 6 bytes from slave device #2\n\n\n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n      // imports wyliodrin library\n\nint main()\n{\n    Wire.begin ();          // joins the I2C bus\n    Wire.requestFrom (2,6); // request 6 bytes from slave device #2\n    return 0;\n}\n\n\n\n\nbeginTransmission()\n\n\nDescription\n\nBegin a transmission to the I2C slave device with the given address. Subsequently, queue bytes for transmission with the \nwrite()\n function and transmit them by calling \nendTransmission()\n.\n\n\nSyntax\n\nbeginTransmission(address)\n\n\nParameters\n\n- address: the 7-bit address of the device to transmit to (uint8_t or int).  \n\n\nReturns\n\nNone\n\n\nExample\n\nPython:\n\n\nfrom wyliodrin import *     # imports wyliodrin module\n\ndef myFunction ():\n    print 'object created'\n\ni2c = TwoWire (myFunction)  # creates a new TwoWire instance\ni2c.beginTransmission (8)   # transmit to device #8\ni2c.write ('a')             # sends one byte\ni2c.endTransmission ()      # stop transmitting\n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin');  // imports wyliodrin module\n\n// creates a new TwoWire instance\nvar i2c = new wyliodrin.TwoWire (function (){\n    console.log ('object created');\n}); \ni2c.beginTransmission (8);      // transmit to device #8\ni2c.write ('a');                // sends one byte\ni2c.endTransmission ();         // stop transmitting\n\n\n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n          // imports wyliodrin library\n\nint main()\n{\n    Wire.begin ();              // joins the I2C bus\n    Wire.beginTransmission(8);  // transmit to device #8\n    Wire.write(\na\n);            // sends one byte\n    Wire.endTransmission();     // stop transmitting\n    return 0;\n}\n\n\n\n\nendTransmission()\n\n\nDescription\n\nEnds a transmission to a slave device that was begun by \nbeginTransmission()\n and transmits the bytes that were queued by \nwrite()\n.\n\n\nendTransmission() accepts a numeric argument changing its behavior for compatibility with certain I2C devices. If different from 0, endTransmission() sends a stop message after transmission, releasing the I2C bus.\n\n\nIf 0, endTransmission() sends a restart message after transmission. The bus will not be released, which prevents another master device from transmitting between messages. This allows one master device to send multiple transmissions while in control.\n\n\nThe default value is different from 0.\n\n\nSyntax\n\nendTransmission([stop])\n\n\nParameters\n\n- stop: optional; different from 0 will send a stop message after the transmission, releasing the bus. 0 will send a restart, keeping the connection active (uint8_t). \n\n\nReturns\n\na value (uint8_t) which indicates the status of the transmission:\n- 0:success;\n\n- 1:data too long to fit in transmit buffer;\n\n- 2:received NACK on transmit of address;\n\n- 3:received NACK on transmit of data;\n\n- 4:other error.\n\n\nExample\n\nPython:\n\n\nfrom wyliodrin import *         # imports wyliodrin module\n\ndef myFunction ():\n    print 'object created'\n\ni2c = TwoWire (myFunction)      # creates a new TwoWire instance\ni2c.beginTransmission (8)       # transmit to device #8\ni2c.write ('a')                 # sends one byte\nstatus = i2c.endTransmission () # stop transmitting\nif (status == 0):               # check if transmission succeded\n    print 'transmission successful'\nelse:\n    print 'transmission error'\n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin');      // imports wyliodrin module\n\n// creates a new TwoWire instance\nvar i2c = new wyliodrin.TwoWire (function (){\n    console.log ('object created');\n}); \ni2c.beginTransmission (8);                  // transmit to device #8\ni2c.write ('a');                            // sends one byte\nvar status = i2c.endTransmission ();        // stop transmitting\nif (status == 0)                            // check if transmission succeded\n    console.log ('transmission successful');\nelse\n    console.log ('transmission error');\n\n\n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n          // imports wyliodrin library\n\nint main()\n{\n    uint8_t status;\n\n    Wire.begin ();              // joins the I2C bus\n    Wire.beginTransmission(8);  // transmit to device #8\n    Wire.write(\na\n);            // sends one byte\n    Wire.endTransmission();     // stop transmitting\n    if (status == 0)            // check if transmission succeded\n        printf (\ntransmission successful\\n\n);\n    else\n        printf (\ntransmission error\\n\n);\n    return 0;\n}\n\n\n\n\nwrite()\n\n\nDescription\n\nWrites data from a slave device in response to a request from a master, or queues bytes for transmission from a master to slave device (in-between calls to \nbeginTransmission()\n and \nendTransmission()\n).\n\n\nSyntax\n\nwrite (value)\n\nwrite (data, length)\n\n\nParameters\n\n- value: a value to send as a single byte (uint8_t);\n\n- data: an array of data to send as bytes (const uint8_t *);\n\n- length: the number of bytes to transmit (size_t).\n\n\nReturns\n\nthe number of bytes written, though reading that number is optional (size_t)\n\nExample\n\nPython:\n\n\nfrom wyliodrin import *         # imports wyliodrin module\n\ndef myFunction ():\n    print 'object created'\n\ni2c = TwoWire (myFunction)          # creates a new TwoWire instance\ni2c.beginTransmission (8)           # transmit to device #8\nwritten = i2c.write ('a')           # sends one byte\nstatus = i2c.endTransmission ()     # stop transmitting\nif (status == 0):                   # check if transmission succeded\n    print 'transmitted '+written+' bytes'\nelse:\n    print 'transmission error'\n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin');      // imports wyliodrin module\n\n// creates a new TwoWire instance\nvar i2c = new wyliodrin.TwoWire (function (){\n    console.log ('object created');\n}); \ni2c.beginTransmission (8);                  // transmit to device #8\nvar sritten = i2c.write ('a');              // sends one byte\nvar status = i2c.endTransmission ();        // stop transmitting\nif (status == 0)                            // check if transmission succeded\n    console.log ('transmitted '+written+' bytes');\nelse\n    console.log ('transmission error');\n\n\n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n          // imports wyliodrin library\n\nint main()\n{\n    uint8_t status;\n    size_t written;\n\n    Wire.begin ();              // joins the I2C bus\n    Wire.beginTransmission(8);  // transmit to device #8\n    written = Wire.write(\na\n);  // sends one byte\n    Wire.endTransmission();     // stop transmitting\n    if (status == 0)            // check if transmission succeded\n        printf (\ntransmitted %d bytes\\n\n, written);\n    else\n        printf (\ntransmission error\\n\n);\n    return 0;\n}\n\n\n\n\navailable()\n\n\nDescription\n\nReturns the number of bytes available for retrieval with \nread()\n. This should be called on a master device after a call to \nrequestFrom()\n or on a slave inside the \nonReceive()\n handler.\n\n\nSyntax\n\navailable()\n\n\nParameters\n\nNone\n\n\nReturns\n\nthe number of bytes available for reading (int)\n\nExample\n\nPython:\n\n\nfrom wyliodrin import *         # imports wyliodrin module\n\ndef myFunction ()):\n    print 'object created'\n\ndef receiveEvent (howMany):\n    global i2c\n    while (1 \n= i2c.available()): # loop through all \n        c = i2c.read()            # receive the character\n        print c                   # print the character\n\ni2c = TwoWire (myFunction)        # creates a new TwoWire instance\ni2c.begin (8)                     # join I2C bus as slave with address no. 8\ni2c.onReceive(receiveEvent)       # register event\n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin');      // imports wyliodrin module\n\n// creates a new TwoWire instance\nvar i2c = new wyliodrin.TwoWire (function (){\n    console.log ('object created');\n}); \n\ni2c.begin (8);                              // join I2C bus as slave with address no. 8\n\ni2c.onReceive(function (howMany){           // register event\n    while (1 \n= i2c.available())            // loop through all \n    {\n        c = i2c.read();                     // receive the character\n        console.log (c);                    // print the character\n    }\n});\n\n\n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n              //imports wyliodrin library\n\nvoid receiveEvent(int howMany) \n{\n  int c;\n  while (1 \n Wire.available())      // loop through all\n  { \n    c = Wire.read();                // receive the character\n    printf (\n%d\\n\n, c);             // print the character\n}\n\nint main()\n{\n    uint8_t status;\n    size_t written;\n\n    Wire.begin (8);                 // join I2C bus as slave with address no. 8\n    Wire.onReceive(receiveEvent);   // register event\n    return 0;\n}\n\n\n\n\nread()\n\n\nDescription\n\nReads a byte that was transmitted from a slave device to a master after a call to \nrequestFrom()\n or was transmitted from a master to a slave.\n\n\nSyntax\n\nread()\n\n\nParameters\n\nNone\n\n\nReturns\n\nthe next byte received (int)\n\n\nExample\n\nPython:\n\n\nfrom wyliodrin import *         # imports wyliodrin module\n\ndef myFunction ():\n    print 'object created'\n\ndef receiveEvent (howMany):\n    global i2c\n    while (1 \n= i2c.available()): # loop through all \n        c = i2c.read()            # receive the character\n        print c                   # print the character\n\ni2c = TwoWire (myFunction)        # creates a new TwoWire instance\ni2c.begin (8)                     # join I2C bus as slave with address no. 8\ni2c.onReceive(receiveEvent)       # register event\n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin');      // imports wyliodrin module\n\n// creates a new TwoWire instance\nvar i2c = new wyliodrin.TwoWire (function (){\n    console.log ('object created');\n}); \n\ni2c.begin (8);                              // join I2C bus as slave with address no. 8\n\ni2c.onReceive(function (howMany){           // register event\n    while (1 \n= i2c.available())            // loop through all \n    {\n        c = i2c.read();                     // receive the character\n        console.log (c);                    // print the character\n    }\n});\n\n\n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n              // imports wyliodrin library\n\nvoid receiveEvent(int howMany) \n{\n  int c;\n  while (1 \n Wire.available())      // loop through all\n  { \n    c = Wire.read();                // receive the character\n    printf (\n%d\\n\n, c);             // print the character\n}\n\nint main()\n{\n    uint8_t status;\n    size_t written;\n\n    Wire.begin (8);                 // join I2C bus as slave with address no. 8\n    Wire.onReceive(receiveEvent);   // register event\n    return 0;\n}\n\n\n\n\npeek()\n\n\nDescription\n\nPrints a byte that was transmitted from a slave device to a master after a call to \nrequestFrom()\n or was transmitted from a master to a slave.\n\nNOTE: The byte is not read, it remains in the buffer until \nread()\n is called.\n\n\nSyntax\n\npeek()\n\n\nParameters\n\nNone\n\n\nReturns\n\nthe next byte received (int)\n\n\nExample\n\nPython:\n\n\nfrom wyliodrin import *         # imports wyliodrin module\n\ndef myFunction ():\n    print 'object created'\n\ndef receiveEvent (howMany):\n    global i2c\n    c = i2c.peek ()\n    print c\n    while (1 \n= i2c.available()): # loop through all \n        c = i2c.read()            # receive the character\n        print c                   # print the character\n\ni2c = TwoWire (myFunction)        # creates a new TwoWire instance\ni2c.begin (8)                     # join I2C bus as slave with address no. 8\ni2c.onReceive(receiveEvent)       # register event\n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin');      // imports wyliodrin module\n\n// creates a new TwoWire instance\nvar i2c = new wyliodrin.TwoWire (function (){\n    console.log ('object created');\n}); \n\ni2c.begin (8);                              // join I2C bus as slave with address no. 8\n\ni2c.onReceive(function (howMany){           // register event\n    var c = i2c.peek ();\n    console.log (c);\n    while (1 \n= i2c.available())            // loop through all \n    {\n        c = i2c.read();                     // receive the character\n        console.log (c);                    // print the character\n    }\n});\n\n\n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n              // imports wyliodrin library\n\nvoid receiveEvent(int howMany) \n{\n  int c;\n  c = Wire.peek ();\n  printf (\n%d\\n\n, c);\n  while (1 \n Wire.available())      // loop through all\n  { \n    c = Wire.read();                // receive the character\n    printf (\n%d\\n\n, c);             // print the character\n}\n\nint main()\n{\n    uint8_t status;\n    size_t written;\n\n    Wire.begin (8);                 // join I2C bus as slave with address no. 8\n    Wire.onReceive(receiveEvent);   // registers event\n    return 0;\n}\n\n\n\n\nonReceive()\n\n\nDescription\n\nRegisters a function to be called when a slave device receives a transmission from a master.\n\n\nSyntax\n\nonReceive(handler)\n\n\nParameters\n\n- handler: the function to be called when the slave receives data; this should take a single int parameter (the number of bytes read from the master) and return nothing.\n\n\nReturns\n\nNone\n\n\nExample\n\nPython:\n\n\nfrom wyliodrin import *         # imports wyliodrin module\n\ndef myFunction ():\n    print 'object created'\n\ndef receiveEvent (howMany):\n    global i2c\n    while (1 \n= i2c.available()): # loop through all \n        c = i2c.read()            # receive the character\n        print c                   # print the character\n\ni2c = TwoWire (myFunction)        # creates a new TwoWire instance\ni2c.begin (8)                     # join I2C bus as slave with address no. 8\ni2c.onReceive(receiveEvent)       # register event\n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin');      // imports wyliodrin module\n\n// creates a new TwoWire instance\nvar i2c = new wyliodrin.TwoWire (function (){\n    console.log ('object created');\n}); \n\ni2c.begin (8);                              // join I2C bus as slave with address no. 8\n\ni2c.onReceive(function (howMany){           // register event\n    while (1 \n= i2c.available())            // loop through all \n    {\n        c = i2c.read();                     // receive the character\n        console.log (c);                    // print the character\n    }\n});\n\n\n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n              // imports wyliodrin library\n\nvoid receiveEvent(int howMany) \n{\n  int c;\n  while (1 \n Wire.available())      // loop through all\n  { \n    c = Wire.read();                // receive the character\n    printf (\n%d\\n\n, c);             // print the character\n}\n\nint main()\n{\n    uint8_t status;\n    size_t written;\n\n    Wire.begin (8);                 // join I2C bus as slave with address no. 8\n    Wire.onReceive(receiveEvent);   // registers event\n    return 0;\n}\n\n\n\n\nonRequest()\n\n\nDescription\n\nRegister a function to be called when a master requests data from this slave device.\n\n\nSyntax\n\nonRequest(handler)\n\n\nParameters\n\n- handler: the function to be called, takes no parameters and returns nothing.\n\n\nReturns\n\nNone\n\n\nExample\n\nPython:\n\n\nfrom wyliodrin import *         # imports wyliodrin module\n\ndef myFunction ():\n    print 'object created'\n\ndef requestEvent ():\n    global i2c\n    i2c.write ('a')               # sends character to master\n\ni2c = TwoWire (myFunction)        # creates a new TwoWire instance\ni2c.begin (8)                     # join I2C bus as slave with address no. 8\ni2c.onRquest(requestEvent)        # registers event\n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin');      // imports wyliodrin module\n\n// creates a new TwoWire instance\nvar i2c = new wyliodrin.TwoWire (function (){\n    console.log ('object created');\n}); \n\ni2c.begin (8);                              // join I2C bus as slave with address no. 8\n\ni2c.onRequest(function (){                  // registers event\n    i2c.write ('a');                        // send character to master\n});\n\n\n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n              // imports wyliodrin library\n\nvoid requestEvent() \n{\n  Wire.write (\na\n);                 // sends character to master\n}\n\nint main()\n{\n    uint8_t status;\n    size_t written;\n\n    Wire.begin (8);                 // join I2C bus as slave with address no. 8\n    Wire.onRequest(requestEvent);   // register event\n    return 0;\n}", 
            "title": "I2C Communication"
        }, 
        {
            "location": "/i2c/index.html#twowire", 
            "text": "Description \nConstructor - creates a Wire object, then calls  begin() . It also calls the function it receives a parameter once the new object is created.\nNOTE: This function is to be used only in JavaScript and Python.  Syntax \nTwoWire(callbackFunction)  Parameters \n- callbackFunction: function to be called after the object is created; it takes no parameter and returns nothing.  Returns \na Wire object  Example \nPython:  from wyliodrin import *     # imports wyliodrin module\n\ndef myFunction ():\n    print 'object created'\n\ni2c = TwoWire (myFunction)  # creates a new TwoWire instance  JavaScript:  var wyliodrin = require ('wyliodrin');  // imports wyliodrin module\n\n// creates a new TwoWire instance\nvar i2c = new wyliodrin.TwoWire (function (){\n    console.log ('object created');\n});", 
            "title": "TwoWire()"
        }, 
        {
            "location": "/i2c/index.html#begin", 
            "text": "Description \nInitiate the Wire library and join the I2C bus as a master or slave. This should normally be called only once.  Syntax \nbegin([address])  Parameters \n- address: the 7-bit slave address (optional); if not specified, join the bus as a master (uint8_t or int).  Returns \nNone  Example \nC/C++:  #include  Wyliodrin.h   // imports wyliodrin library\n\nint main()\n{\n    Wire.begin ();      // joins the I2C bus\n    return 0;\n}", 
            "title": "begin()"
        }, 
        {
            "location": "/i2c/index.html#requestfrom", 
            "text": "Description \nUsed by the master to request bytes from a slave device. The bytes may then be retrieved with the  available()  and  read()  functions.   requestFrom() accepts a numeric argument changing its behavior for compatibility with certain I2C devices. If different from 0, requestFrom() sends a stop message after the request, releasing the I2C bus.  If 0, requestFrom() sends a restart message after the request. The bus will not be released, which prevents another master device from requesting between messages. This allows one master device to send multiple requests while in control.  The default value is different from 0.  Syntax \nrequestFrom(address, quantity, [stop])  Parameters \n- address: the 7-bit address of the device to request bytes from (uint8_t or int); \n- quantity: the number of bytes to request (uint8_t or int); \n- stop: different from 0 will send a stop message after the request, releasing the bus. 0 will continually send a restart after the request, keeping the connection active.  Returns \nthe number of bytes returned from the slave device (uint8_t)  Example \nPython:  from wyliodrin import *     # imports wyliodrin module\n\ndef myFunction ():\n    print 'object created'\n\ni2c = TwoWire (myFunction)  # creates a new TwoWire instance\ni2c.requestFrom (2,6)       # requests 6 bytes from slave device no. 2  JavaScript:  var wyliodrin = require ('wyliodrin');  // imports wyliodrin module\n\n// creates a new TwoWire instance\nvar i2c = new wyliodrin.TwoWire (function (){\n    console.log ('object created');\n}); \ni2c.requestFrom (2,6);                  // request 6 bytes from slave device #2  C/C++:  #include  Wyliodrin.h       // imports wyliodrin library\n\nint main()\n{\n    Wire.begin ();          // joins the I2C bus\n    Wire.requestFrom (2,6); // request 6 bytes from slave device #2\n    return 0;\n}", 
            "title": "requestFrom()"
        }, 
        {
            "location": "/i2c/index.html#begintransmission", 
            "text": "Description \nBegin a transmission to the I2C slave device with the given address. Subsequently, queue bytes for transmission with the  write()  function and transmit them by calling  endTransmission() .  Syntax \nbeginTransmission(address)  Parameters \n- address: the 7-bit address of the device to transmit to (uint8_t or int).    Returns \nNone  Example \nPython:  from wyliodrin import *     # imports wyliodrin module\n\ndef myFunction ():\n    print 'object created'\n\ni2c = TwoWire (myFunction)  # creates a new TwoWire instance\ni2c.beginTransmission (8)   # transmit to device #8\ni2c.write ('a')             # sends one byte\ni2c.endTransmission ()      # stop transmitting  JavaScript:  var wyliodrin = require ('wyliodrin');  // imports wyliodrin module\n\n// creates a new TwoWire instance\nvar i2c = new wyliodrin.TwoWire (function (){\n    console.log ('object created');\n}); \ni2c.beginTransmission (8);      // transmit to device #8\ni2c.write ('a');                // sends one byte\ni2c.endTransmission ();         // stop transmitting  C/C++:  #include  Wyliodrin.h           // imports wyliodrin library\n\nint main()\n{\n    Wire.begin ();              // joins the I2C bus\n    Wire.beginTransmission(8);  // transmit to device #8\n    Wire.write( a );            // sends one byte\n    Wire.endTransmission();     // stop transmitting\n    return 0;\n}", 
            "title": "beginTransmission()"
        }, 
        {
            "location": "/i2c/index.html#endtransmission", 
            "text": "Description \nEnds a transmission to a slave device that was begun by  beginTransmission()  and transmits the bytes that were queued by  write() .  endTransmission() accepts a numeric argument changing its behavior for compatibility with certain I2C devices. If different from 0, endTransmission() sends a stop message after transmission, releasing the I2C bus.  If 0, endTransmission() sends a restart message after transmission. The bus will not be released, which prevents another master device from transmitting between messages. This allows one master device to send multiple transmissions while in control.  The default value is different from 0.  Syntax \nendTransmission([stop])  Parameters \n- stop: optional; different from 0 will send a stop message after the transmission, releasing the bus. 0 will send a restart, keeping the connection active (uint8_t).   Returns \na value (uint8_t) which indicates the status of the transmission:\n- 0:success; \n- 1:data too long to fit in transmit buffer; \n- 2:received NACK on transmit of address; \n- 3:received NACK on transmit of data; \n- 4:other error.  Example \nPython:  from wyliodrin import *         # imports wyliodrin module\n\ndef myFunction ():\n    print 'object created'\n\ni2c = TwoWire (myFunction)      # creates a new TwoWire instance\ni2c.beginTransmission (8)       # transmit to device #8\ni2c.write ('a')                 # sends one byte\nstatus = i2c.endTransmission () # stop transmitting\nif (status == 0):               # check if transmission succeded\n    print 'transmission successful'\nelse:\n    print 'transmission error'  JavaScript:  var wyliodrin = require ('wyliodrin');      // imports wyliodrin module\n\n// creates a new TwoWire instance\nvar i2c = new wyliodrin.TwoWire (function (){\n    console.log ('object created');\n}); \ni2c.beginTransmission (8);                  // transmit to device #8\ni2c.write ('a');                            // sends one byte\nvar status = i2c.endTransmission ();        // stop transmitting\nif (status == 0)                            // check if transmission succeded\n    console.log ('transmission successful');\nelse\n    console.log ('transmission error');  C/C++:  #include  Wyliodrin.h           // imports wyliodrin library\n\nint main()\n{\n    uint8_t status;\n\n    Wire.begin ();              // joins the I2C bus\n    Wire.beginTransmission(8);  // transmit to device #8\n    Wire.write( a );            // sends one byte\n    Wire.endTransmission();     // stop transmitting\n    if (status == 0)            // check if transmission succeded\n        printf ( transmission successful\\n );\n    else\n        printf ( transmission error\\n );\n    return 0;\n}", 
            "title": "endTransmission()"
        }, 
        {
            "location": "/i2c/index.html#write", 
            "text": "Description \nWrites data from a slave device in response to a request from a master, or queues bytes for transmission from a master to slave device (in-between calls to  beginTransmission()  and  endTransmission() ).  Syntax \nwrite (value) \nwrite (data, length)  Parameters \n- value: a value to send as a single byte (uint8_t); \n- data: an array of data to send as bytes (const uint8_t *); \n- length: the number of bytes to transmit (size_t).  Returns \nthe number of bytes written, though reading that number is optional (size_t) Example \nPython:  from wyliodrin import *         # imports wyliodrin module\n\ndef myFunction ():\n    print 'object created'\n\ni2c = TwoWire (myFunction)          # creates a new TwoWire instance\ni2c.beginTransmission (8)           # transmit to device #8\nwritten = i2c.write ('a')           # sends one byte\nstatus = i2c.endTransmission ()     # stop transmitting\nif (status == 0):                   # check if transmission succeded\n    print 'transmitted '+written+' bytes'\nelse:\n    print 'transmission error'  JavaScript:  var wyliodrin = require ('wyliodrin');      // imports wyliodrin module\n\n// creates a new TwoWire instance\nvar i2c = new wyliodrin.TwoWire (function (){\n    console.log ('object created');\n}); \ni2c.beginTransmission (8);                  // transmit to device #8\nvar sritten = i2c.write ('a');              // sends one byte\nvar status = i2c.endTransmission ();        // stop transmitting\nif (status == 0)                            // check if transmission succeded\n    console.log ('transmitted '+written+' bytes');\nelse\n    console.log ('transmission error');  C/C++:  #include  Wyliodrin.h           // imports wyliodrin library\n\nint main()\n{\n    uint8_t status;\n    size_t written;\n\n    Wire.begin ();              // joins the I2C bus\n    Wire.beginTransmission(8);  // transmit to device #8\n    written = Wire.write( a );  // sends one byte\n    Wire.endTransmission();     // stop transmitting\n    if (status == 0)            // check if transmission succeded\n        printf ( transmitted %d bytes\\n , written);\n    else\n        printf ( transmission error\\n );\n    return 0;\n}", 
            "title": "write()"
        }, 
        {
            "location": "/i2c/index.html#available", 
            "text": "Description \nReturns the number of bytes available for retrieval with  read() . This should be called on a master device after a call to  requestFrom()  or on a slave inside the  onReceive()  handler.  Syntax \navailable()  Parameters \nNone  Returns \nthe number of bytes available for reading (int) Example \nPython:  from wyliodrin import *         # imports wyliodrin module\n\ndef myFunction ()):\n    print 'object created'\n\ndef receiveEvent (howMany):\n    global i2c\n    while (1  = i2c.available()): # loop through all \n        c = i2c.read()            # receive the character\n        print c                   # print the character\n\ni2c = TwoWire (myFunction)        # creates a new TwoWire instance\ni2c.begin (8)                     # join I2C bus as slave with address no. 8\ni2c.onReceive(receiveEvent)       # register event  JavaScript:  var wyliodrin = require ('wyliodrin');      // imports wyliodrin module\n\n// creates a new TwoWire instance\nvar i2c = new wyliodrin.TwoWire (function (){\n    console.log ('object created');\n}); \n\ni2c.begin (8);                              // join I2C bus as slave with address no. 8\n\ni2c.onReceive(function (howMany){           // register event\n    while (1  = i2c.available())            // loop through all \n    {\n        c = i2c.read();                     // receive the character\n        console.log (c);                    // print the character\n    }\n});  C/C++:  #include  Wyliodrin.h               //imports wyliodrin library\n\nvoid receiveEvent(int howMany) \n{\n  int c;\n  while (1   Wire.available())      // loop through all\n  { \n    c = Wire.read();                // receive the character\n    printf ( %d\\n , c);             // print the character\n}\n\nint main()\n{\n    uint8_t status;\n    size_t written;\n\n    Wire.begin (8);                 // join I2C bus as slave with address no. 8\n    Wire.onReceive(receiveEvent);   // register event\n    return 0;\n}", 
            "title": "available()"
        }, 
        {
            "location": "/i2c/index.html#read", 
            "text": "Description \nReads a byte that was transmitted from a slave device to a master after a call to  requestFrom()  or was transmitted from a master to a slave.  Syntax \nread()  Parameters \nNone  Returns \nthe next byte received (int)  Example \nPython:  from wyliodrin import *         # imports wyliodrin module\n\ndef myFunction ():\n    print 'object created'\n\ndef receiveEvent (howMany):\n    global i2c\n    while (1  = i2c.available()): # loop through all \n        c = i2c.read()            # receive the character\n        print c                   # print the character\n\ni2c = TwoWire (myFunction)        # creates a new TwoWire instance\ni2c.begin (8)                     # join I2C bus as slave with address no. 8\ni2c.onReceive(receiveEvent)       # register event  JavaScript:  var wyliodrin = require ('wyliodrin');      // imports wyliodrin module\n\n// creates a new TwoWire instance\nvar i2c = new wyliodrin.TwoWire (function (){\n    console.log ('object created');\n}); \n\ni2c.begin (8);                              // join I2C bus as slave with address no. 8\n\ni2c.onReceive(function (howMany){           // register event\n    while (1  = i2c.available())            // loop through all \n    {\n        c = i2c.read();                     // receive the character\n        console.log (c);                    // print the character\n    }\n});  C/C++:  #include  Wyliodrin.h               // imports wyliodrin library\n\nvoid receiveEvent(int howMany) \n{\n  int c;\n  while (1   Wire.available())      // loop through all\n  { \n    c = Wire.read();                // receive the character\n    printf ( %d\\n , c);             // print the character\n}\n\nint main()\n{\n    uint8_t status;\n    size_t written;\n\n    Wire.begin (8);                 // join I2C bus as slave with address no. 8\n    Wire.onReceive(receiveEvent);   // register event\n    return 0;\n}", 
            "title": "read()"
        }, 
        {
            "location": "/i2c/index.html#peek", 
            "text": "Description \nPrints a byte that was transmitted from a slave device to a master after a call to  requestFrom()  or was transmitted from a master to a slave. \nNOTE: The byte is not read, it remains in the buffer until  read()  is called.  Syntax \npeek()  Parameters \nNone  Returns \nthe next byte received (int)  Example \nPython:  from wyliodrin import *         # imports wyliodrin module\n\ndef myFunction ():\n    print 'object created'\n\ndef receiveEvent (howMany):\n    global i2c\n    c = i2c.peek ()\n    print c\n    while (1  = i2c.available()): # loop through all \n        c = i2c.read()            # receive the character\n        print c                   # print the character\n\ni2c = TwoWire (myFunction)        # creates a new TwoWire instance\ni2c.begin (8)                     # join I2C bus as slave with address no. 8\ni2c.onReceive(receiveEvent)       # register event  JavaScript:  var wyliodrin = require ('wyliodrin');      // imports wyliodrin module\n\n// creates a new TwoWire instance\nvar i2c = new wyliodrin.TwoWire (function (){\n    console.log ('object created');\n}); \n\ni2c.begin (8);                              // join I2C bus as slave with address no. 8\n\ni2c.onReceive(function (howMany){           // register event\n    var c = i2c.peek ();\n    console.log (c);\n    while (1  = i2c.available())            // loop through all \n    {\n        c = i2c.read();                     // receive the character\n        console.log (c);                    // print the character\n    }\n});  C/C++:  #include  Wyliodrin.h               // imports wyliodrin library\n\nvoid receiveEvent(int howMany) \n{\n  int c;\n  c = Wire.peek ();\n  printf ( %d\\n , c);\n  while (1   Wire.available())      // loop through all\n  { \n    c = Wire.read();                // receive the character\n    printf ( %d\\n , c);             // print the character\n}\n\nint main()\n{\n    uint8_t status;\n    size_t written;\n\n    Wire.begin (8);                 // join I2C bus as slave with address no. 8\n    Wire.onReceive(receiveEvent);   // registers event\n    return 0;\n}", 
            "title": "peek()"
        }, 
        {
            "location": "/i2c/index.html#onreceive", 
            "text": "Description \nRegisters a function to be called when a slave device receives a transmission from a master.  Syntax \nonReceive(handler)  Parameters \n- handler: the function to be called when the slave receives data; this should take a single int parameter (the number of bytes read from the master) and return nothing.  Returns \nNone  Example \nPython:  from wyliodrin import *         # imports wyliodrin module\n\ndef myFunction ():\n    print 'object created'\n\ndef receiveEvent (howMany):\n    global i2c\n    while (1  = i2c.available()): # loop through all \n        c = i2c.read()            # receive the character\n        print c                   # print the character\n\ni2c = TwoWire (myFunction)        # creates a new TwoWire instance\ni2c.begin (8)                     # join I2C bus as slave with address no. 8\ni2c.onReceive(receiveEvent)       # register event  JavaScript:  var wyliodrin = require ('wyliodrin');      // imports wyliodrin module\n\n// creates a new TwoWire instance\nvar i2c = new wyliodrin.TwoWire (function (){\n    console.log ('object created');\n}); \n\ni2c.begin (8);                              // join I2C bus as slave with address no. 8\n\ni2c.onReceive(function (howMany){           // register event\n    while (1  = i2c.available())            // loop through all \n    {\n        c = i2c.read();                     // receive the character\n        console.log (c);                    // print the character\n    }\n});  C/C++:  #include  Wyliodrin.h               // imports wyliodrin library\n\nvoid receiveEvent(int howMany) \n{\n  int c;\n  while (1   Wire.available())      // loop through all\n  { \n    c = Wire.read();                // receive the character\n    printf ( %d\\n , c);             // print the character\n}\n\nint main()\n{\n    uint8_t status;\n    size_t written;\n\n    Wire.begin (8);                 // join I2C bus as slave with address no. 8\n    Wire.onReceive(receiveEvent);   // registers event\n    return 0;\n}", 
            "title": "onReceive()"
        }, 
        {
            "location": "/i2c/index.html#onrequest", 
            "text": "Description \nRegister a function to be called when a master requests data from this slave device.  Syntax \nonRequest(handler)  Parameters \n- handler: the function to be called, takes no parameters and returns nothing.  Returns \nNone  Example \nPython:  from wyliodrin import *         # imports wyliodrin module\n\ndef myFunction ():\n    print 'object created'\n\ndef requestEvent ():\n    global i2c\n    i2c.write ('a')               # sends character to master\n\ni2c = TwoWire (myFunction)        # creates a new TwoWire instance\ni2c.begin (8)                     # join I2C bus as slave with address no. 8\ni2c.onRquest(requestEvent)        # registers event  JavaScript:  var wyliodrin = require ('wyliodrin');      // imports wyliodrin module\n\n// creates a new TwoWire instance\nvar i2c = new wyliodrin.TwoWire (function (){\n    console.log ('object created');\n}); \n\ni2c.begin (8);                              // join I2C bus as slave with address no. 8\n\ni2c.onRequest(function (){                  // registers event\n    i2c.write ('a');                        // send character to master\n});  C/C++:  #include  Wyliodrin.h               // imports wyliodrin library\n\nvoid requestEvent() \n{\n  Wire.write ( a );                 // sends character to master\n}\n\nint main()\n{\n    uint8_t status;\n    size_t written;\n\n    Wire.begin (8);                 // join I2C bus as slave with address no. 8\n    Wire.onRequest(requestEvent);   // register event\n    return 0;\n}", 
            "title": "onRequest()"
        }, 
        {
            "location": "/signal/index.html", 
            "text": "sendSignal()\n\n\nDescription\n\nSends a signal represented by name and value to Wyliodrin's dashboard.\n\nNOTE: The function works with Wyliodrin IDE.\n\n\nSyntax\n\nsendSignal (name, value)\n\n\nParameters\n\n- name: the name of the signal (const char *);\n\n- value: the value of the signal (double).  \n\n\nReturns\n\nthe error code (0 for success) (int)\n\n\nExample\n\nPython:\n\n\nfrom wyliodrin import *     # imports wyliodrin module\n\nsendSignal ('line', 0.5)    # sends signal with name line and value 0.5\n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin');  // imports wyliodrin module\n\nwyliodrin.sendSignal ('line', 0.5);     // sends signal with name line and value 0.5\n\n\n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n          // imports wyliodrin library\n\nint main()\n{\n    sendSignal (\nline\n, 0.5);   // sends signal with name line and value 0.5\n    return 0;\n}\n\n\n\n\nsendSignalAndFlag()\n\n\nDescription\n\nSends a signal represented by name and value to Wyliodrin's dashboard and puts a flag on the graph.\n\nNOTE: The function works with Wyliodrin IDE.\n\n\nSyntax\n\nsendSignalAndFlag (flag, name, value)\n\n\nParameters\n\n- flag: the name of the flag that appears on the graph (const char \n);  \n\n- name: the name of the signal (const char \n);\n\n- value: the value of the signal (double).  \n\n\nReturns\n\nthe error code (0 for success) (int)\n\n\nExample\n\nPython:\n\n\nfrom wyliodrin import *                     # imports wyliodrin module\n\n# sends signal with name line and value 0.5 and puts a flag with name myFlag on the graph\nsendSignalAndFlag ('myFlag', 'line', 0.5)   \n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin');      // imports wyliodrin module\n\n// sends signal with name line and value 0.5 and puts a flag with name myFlag on the graph\nwyliodrin.sendSignalAndFlag ('myFlag', 'line', 0.5);    \n\n\n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n                          // imports wyliodrin library\n\nint main()\n{\n    // sends signal with name line and value 0.5 and puts a flag with name myFlag on the graph\n    sendSignalAndFlag (\nflag\n, \nline\n, 0.5);    \n    return 0;\n}\n\n\n\n\nsendSignalsAndFlag()\n\n\nDescription\n\nSends multiple signals represented by name and value to Wyliodrin's dashboard and puts a flag on the graph.\n\nNOTE: The function works with Wyliodrin IDE and only for C/C++.\n\n\nSyntax\n\nsendSignalsAndFlag(flag, name1, value1, name2, value2, ...)\n\n\nParameters\n\n- flag: the name of the flag that appears on the graph (const char \n);  \n\n- nameX: the name of the signal X (const char \n);\n\n- valueX: the value of the signal X (double).  \n\n\nReturns\n\nthe error code (0 for success) (int)\n\n\nExample\n\nC/C++:\n\n\n#include \nWyliodrin.h\n      // imports wyliodrin library\n\nint main()\n{\n\n    // sends one signal with name line and value 0.5 and another with name temperature and value 15.7 \n    // and puts a flag with name myFlag on the graph\n    sendSignalsAndFlag (\nmyFlag\n, \nline\n, 0.5, \ntemperature\n, 15.7);    \n    return 0;\n}\n\n\n\n\nsendSignals()\n\n\nDescription\n\nSends multiple signals represented by name and value to Wyliodrin's dashboard.\n\nNOTE: The function works with Wyliodrin IDE and only for C/C++.\n\n\nSyntax\n\nsendSignals(name1, value1, name2, value2, ...)\n\n\nParameters\n \n\n- nameX: the name of the signal X (const char *);\n\n- valueX: the value of the signal X (double).  \n\n\nReturns\n\nthe error code (0 for success) (int)\n\n\nExample\n\nC/C++:\n\n\n#include \nWyliodrin.h\n      // imports wyliodrin library\n\nint main()\n{   \n    // sends one signal with name line and value 0.5 and another with name temperature\n    // and value 15.7 \n    sendSignals (\nline\n, 0.5, \ntemperature\n, 15.7); \n    return 0;\n}\n\n\n\n\nputFlag()\n\n\nDescription\n\nAttaches a flag to a signal on the graph.\n\nNOTE: The function works with Wyliodrin IDE.\n\n\nSyntax\n\nputFlag(name, flag)\n\n\nParameters\n \n\n- name: the name of the signal the flag is attached to (const char \n);\n\n- value: the of the flag that appears on the graph (const char \n).  \n\n\nReturns\n\nthe error code (0 for success) (int)\n\n\nExample\n\nPython:\n\n\nfrom wyliodrin import *     # imports wyliodrin module\n\nputFlag ('line', myFlag)    # puts the flag myFlag on the graph which displays the line signal  \n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin');  // imports wyliodrin module\n\nwyliodrin.putFlag ('line', myFlag);     // puts the flag myFlag on the graph which displays the line signal     \n\n\n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n          // imports wyliodrin library\n\nint main()\n{\n\n    putFlag (\nline\n, myFlag);  // puts the flag myFlag on the graph which displays the line signal  \n    return 0;\n}\n\n\n\n\nsendSignalsList()\n\n\nDescription\n\nSends a list of signals to the dashboard. The list of signal labels and values should have the same number of elements.\n\nNOTE: The function works with Wyliodrin IDE.\n\n\nSyntax\n\nsendSignalsList(names, values, elements)\n\n\nParameters\n \n\n- names: a list with the names of the signals (const char *\n);\n\n- values: a list with the values of the signals (double \n);\n\n- elements: the length of the lists (int).  \n\n\nReturns\n\nthe error code (0 for success) (int)\n\n\nExample\n\nPython:\n\n\nfrom wyliodrin import *     # imports wyliodrin module\n\n# sends one signal with name line and value 1.5 \n# and another with name temperature and value 17.9\nsendSignalsList (['line', 'temperature'], [1.5, 17.9], 2)\n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin');  // imports wyliodrin module\n\n// sends one signal with name line and value 1.5 \n// and another with name temperature and value 17.9\nwyliodrin.sendSignalsList (['line', 'temperature'], [1.5, 17.9], 2);\n\n\n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n          // imports wyliodrin library\n\nint main()\n{\n    const char names [2] = {\nline\n, \ntemperature\n};\n    double values [2] = {1.5, 17.9};\n    // sends one signal with name line and value 1.5 \n    // and another with name temperature and value 17.9\n    sendSignalsList (names, values, 2); \n    return 0;\n}\n\n\n\n\nsendSignalsListAndFlag()\n\n\nDescription\n\nSends a list of signals to the dashboard and puts a flag on the graphs. The list of signal labels and values should have the same number of elements.\n\nNOTE: The function works with Wyliodrin IDE.\n\n\nSyntax\n\nsendSignalsList(flag, names, values, elements)\n\n\nParameters\n \n\n- flag: the name of the flag that appears on the graph (const char \n);\n\n- names: a list with the names of the signals (const char \n);\n\n- values: a list with the values of the signals (double \n);\n\n- elements: the length of the lists (int).  \n\n\nReturns\n\nthe error code (0 for success) (int)\n\n\nExample\n\nPython:\n\n\nfrom wyliodrin import *     # imports wyliodrin module\n\n# sends one signal with name line and value 1.5 \n# and another with name temperature and value 17.9\n# and puts the flag myFlag on both graphs\nsendSignalsListAndFlag ('myFlag', ['line', 'temperature'], [1.5, 17.9], 2)\n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin');  // imports wyliodrin module\n\n// sends one signal with name line and value 1.5 \n// and another with name temperature and value 17.9\n// and puts the flag myFlag on both graphs\nwyliodrin.sendSignalsList ('myFlag', ['line', 'temperature'], [1.5, 17.9], 2);\n\n\n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n          // imports wyliodrin library\n\nint main()\n{\n    const char names [2] = {\nline\n, \ntemperature\n};\n    double values [2] = {1.5, 17.9};\n    // sends one signal with name line and value 1.5 \n    // and another with name temperature and value 17.9\n    // and puts the flag myFlag on both graphs\n    sendSignalsList (\nmyFlag\n, names, values, 2);   \n    return 0;\n}\n\n\n\n\nsendCoordinates()\n\n\nDescription\n\nSends a signal described by latitude and longitude to be displayed on a maps dashboard element. \n\nNOTE: The function works with Wyliodrin IDE.\n\n\nSyntax\n\nsendCoordinates(name, latitude, longitude)\n\n\nParameters\n \n\n- name: the name of the signal (const char *);\n\n- latitude: the latitude to be displayed on the maps (double);\n\n- longitude: the longitude to be displayed on the maps (double).\n\n\nReturns\n\nthe error code (0 for success) (int)\n\n\nExample\n\nPython:\n\n\nfrom wyliodrin import *             # imports wyliodrin module\n\n# places a point on the map, at latitude 45.5 and longitude 21.54\nsendCoordinates ('coord', 45.5, 21.45)  \n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin');  // imports wyliodrin module\n\n// places a point on the map, at latitude 45.5 and longitude 21.54\nwyliodrin.sendCoordinates ('coord', 45.5, 21.45);\n\n\n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n          // imports wyliodrin library\n\nint main()\n{\n    // places a point on the map, at latitude 45.5 and longitude 21.54\n    sendCoordinates ('coord', 45.5, 21.45); \n    return 0;\n}\n\n\n\n\nsendCoordinatesAndFlag()\n\n\nDescription\n\nSends a signal described by latitude and longitude to be displayed on a maps dashboard element and also puts a flag. \n\nNOTE: The function works with Wyliodrin IDE.\n\n\nSyntax\n\nsendCoordinates(name, latitude, longitude, flag)\n\n\nParameters\n \n\n- name: the name of the signal (const char *);\n\n- latitude: the latitude to be displayed on the maps (double);\n\n- longitude: the longitude to be displayed on the maps (double);\n\n- flag: the name of the flag that appears on the maps.\n\n\nReturns\n\nthe error code (0 for success) (int)\n\n\nExample\n\nPython:\n\n\nfrom wyliodrin import *             # imports wyliodrin module\n\n# places a point on the map, at latitude 45.5 and longitude 21.54\n# and puts the flag myPoint at that coordinates\nsendCoordinatesAndFlag ('coord', 45.5, 21.45, 'myPoint')    \n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin');  // imports wyliodrin module\n\n// places a point on the map, at latitude 45.5 and longitude 21.54\n// and puts the flag myPoint at that coordinates\nwyliodrin.sendCoordinatesAndFlag ('coord', 45.5, 21.45, 'myPoint');\n\n\n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n          // imports wyliodrin library\n\nint main()\n{\n    // places a point on the map, at latitude 45.5 and longitude 21.54\n    // and puts the flag myPoint at that coordinates\n    sendCoordinatesAndFlag ('coord', 45.5, 21.45, 'myPoint');   \n    return 0;\n}\n\n\n\n\nsendSignalXY()\n\n\nDescription\n\nSends a signal described by two coordinates.   \n\nNOTE: The function works with Wyliodrin IDE.\n\n\nSyntax\n\nsendSignalXY(name, x, y)\n\n\nParameters\n \n\n- name: the name of the signal (const char *);\n\n- x: the x coordinate of the signal (double);\n\n- y: the y coordinate of the signal; y is considered the timestamp of the value x (double).  \n\n\nReturns\n\nthe error code (0 for success) (int)\n\n\nExample\n\nPython:\n\n\nfrom wyliodrin import *             # imports wyliodrin module\n\n# sends a signal with name myLine and defined by values 3 and 15.5\nsendSignalXY ('myLine', 3, 15.5)\n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin');  // imports wyliodrin module\n\n// sends a signal with name myLine and defined by values 3 and 15.5\nwyliodrin.sendSignalXY ('myLine', 3, 15.5);\n\n\n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n          // imports wyliodrin library\n\nint main()\n{\n    // sends a signal with name myLine and defined by values 3 and 15.5\n    sendSignalXY ('myLine', 3, 15.5);\n    return 0;\n}\n\n\n\n\nsendSignalXYAndFlag()\n\n\nDescription\n\nSends a signal described by two coordinates and puts a flag on the graph.   \n\nNOTE: The function works with Wyliodrin IDE.\n\n\nSyntax\n\nsendSignalXY(name, x, y, flag)\n\n\nParameters\n \n\n- name: the name of the signal (const char *);\n\n- x: the x coordinate of the signal (double);\n\n- y: the y coordinate of the signal; y is considered the timestamp of the value x (double);\n\n= flag: the name of the flag that appears on the graph.  \n\n\nReturns\n\nthe error code (0 for success) (int)\n\n\nExample\n\nPython:\n\n\nfrom wyliodrin import *             # imports wyliodrin module\n\n# sends a signal with name myLine and defined by values 3 and 15.5\n# and puts the flag myFlag on the graph\nsendSignalXYAndFlag ('myLine', 3, 15.5, 'myFlag')\n\n\n\n\nJavaScript:\n\n\nvar wyliodrin = require ('wyliodrin');  // imports wyliodrin module\n\n// sends a signal with name myLine and defined by values 3 and 15.5\n// and puts the flag myFlag on the graph\nwyliodrin.sendSignalXYAndFlag ('myLine', 3, 15.5, 'myFlag');\n\n\n\n\nC/C++:\n\n\n#include \nWyliodrin.h\n          // imports wyliodrin library\n\nint main()\n{\n    // sends a signal with name myLine and defined by values 3 and 15.5\n    // and puts the flag myFlag on the graph\n    sendSignalXYAndFlag ('myLine', 3, 15.5, 'myFlag');\n    return 0;\n}", 
            "title": "Signal"
        }, 
        {
            "location": "/signal/index.html#sendsignal", 
            "text": "Description \nSends a signal represented by name and value to Wyliodrin's dashboard. \nNOTE: The function works with Wyliodrin IDE.  Syntax \nsendSignal (name, value)  Parameters \n- name: the name of the signal (const char *); \n- value: the value of the signal (double).    Returns \nthe error code (0 for success) (int)  Example \nPython:  from wyliodrin import *     # imports wyliodrin module\n\nsendSignal ('line', 0.5)    # sends signal with name line and value 0.5  JavaScript:  var wyliodrin = require ('wyliodrin');  // imports wyliodrin module\n\nwyliodrin.sendSignal ('line', 0.5);     // sends signal with name line and value 0.5  C/C++:  #include  Wyliodrin.h           // imports wyliodrin library\n\nint main()\n{\n    sendSignal ( line , 0.5);   // sends signal with name line and value 0.5\n    return 0;\n}", 
            "title": "sendSignal()"
        }, 
        {
            "location": "/signal/index.html#sendsignalandflag", 
            "text": "Description \nSends a signal represented by name and value to Wyliodrin's dashboard and puts a flag on the graph. \nNOTE: The function works with Wyliodrin IDE.  Syntax \nsendSignalAndFlag (flag, name, value)  Parameters \n- flag: the name of the flag that appears on the graph (const char  );   \n- name: the name of the signal (const char  ); \n- value: the value of the signal (double).    Returns \nthe error code (0 for success) (int)  Example \nPython:  from wyliodrin import *                     # imports wyliodrin module\n\n# sends signal with name line and value 0.5 and puts a flag with name myFlag on the graph\nsendSignalAndFlag ('myFlag', 'line', 0.5)     JavaScript:  var wyliodrin = require ('wyliodrin');      // imports wyliodrin module\n\n// sends signal with name line and value 0.5 and puts a flag with name myFlag on the graph\nwyliodrin.sendSignalAndFlag ('myFlag', 'line', 0.5);      C/C++:  #include  Wyliodrin.h                           // imports wyliodrin library\n\nint main()\n{\n    // sends signal with name line and value 0.5 and puts a flag with name myFlag on the graph\n    sendSignalAndFlag ( flag ,  line , 0.5);    \n    return 0;\n}", 
            "title": "sendSignalAndFlag()"
        }, 
        {
            "location": "/signal/index.html#sendsignalsandflag", 
            "text": "Description \nSends multiple signals represented by name and value to Wyliodrin's dashboard and puts a flag on the graph. \nNOTE: The function works with Wyliodrin IDE and only for C/C++.  Syntax \nsendSignalsAndFlag(flag, name1, value1, name2, value2, ...)  Parameters \n- flag: the name of the flag that appears on the graph (const char  );   \n- nameX: the name of the signal X (const char  ); \n- valueX: the value of the signal X (double).    Returns \nthe error code (0 for success) (int)  Example \nC/C++:  #include  Wyliodrin.h       // imports wyliodrin library\n\nint main()\n{\n\n    // sends one signal with name line and value 0.5 and another with name temperature and value 15.7 \n    // and puts a flag with name myFlag on the graph\n    sendSignalsAndFlag ( myFlag ,  line , 0.5,  temperature , 15.7);    \n    return 0;\n}", 
            "title": "sendSignalsAndFlag()"
        }, 
        {
            "location": "/signal/index.html#sendsignals", 
            "text": "Description \nSends multiple signals represented by name and value to Wyliodrin's dashboard. \nNOTE: The function works with Wyliodrin IDE and only for C/C++.  Syntax \nsendSignals(name1, value1, name2, value2, ...)  Parameters   \n- nameX: the name of the signal X (const char *); \n- valueX: the value of the signal X (double).    Returns \nthe error code (0 for success) (int)  Example \nC/C++:  #include  Wyliodrin.h       // imports wyliodrin library\n\nint main()\n{   \n    // sends one signal with name line and value 0.5 and another with name temperature\n    // and value 15.7 \n    sendSignals ( line , 0.5,  temperature , 15.7); \n    return 0;\n}", 
            "title": "sendSignals()"
        }, 
        {
            "location": "/signal/index.html#putflag", 
            "text": "Description \nAttaches a flag to a signal on the graph. \nNOTE: The function works with Wyliodrin IDE.  Syntax \nputFlag(name, flag)  Parameters   \n- name: the name of the signal the flag is attached to (const char  ); \n- value: the of the flag that appears on the graph (const char  ).    Returns \nthe error code (0 for success) (int)  Example \nPython:  from wyliodrin import *     # imports wyliodrin module\n\nputFlag ('line', myFlag)    # puts the flag myFlag on the graph which displays the line signal    JavaScript:  var wyliodrin = require ('wyliodrin');  // imports wyliodrin module\n\nwyliodrin.putFlag ('line', myFlag);     // puts the flag myFlag on the graph which displays the line signal       C/C++:  #include  Wyliodrin.h           // imports wyliodrin library\n\nint main()\n{\n\n    putFlag ( line , myFlag);  // puts the flag myFlag on the graph which displays the line signal  \n    return 0;\n}", 
            "title": "putFlag()"
        }, 
        {
            "location": "/signal/index.html#sendsignalslist", 
            "text": "Description \nSends a list of signals to the dashboard. The list of signal labels and values should have the same number of elements. \nNOTE: The function works with Wyliodrin IDE.  Syntax \nsendSignalsList(names, values, elements)  Parameters   \n- names: a list with the names of the signals (const char * ); \n- values: a list with the values of the signals (double  ); \n- elements: the length of the lists (int).    Returns \nthe error code (0 for success) (int)  Example \nPython:  from wyliodrin import *     # imports wyliodrin module\n\n# sends one signal with name line and value 1.5 \n# and another with name temperature and value 17.9\nsendSignalsList (['line', 'temperature'], [1.5, 17.9], 2)  JavaScript:  var wyliodrin = require ('wyliodrin');  // imports wyliodrin module\n\n// sends one signal with name line and value 1.5 \n// and another with name temperature and value 17.9\nwyliodrin.sendSignalsList (['line', 'temperature'], [1.5, 17.9], 2);  C/C++:  #include  Wyliodrin.h           // imports wyliodrin library\n\nint main()\n{\n    const char names [2] = { line ,  temperature };\n    double values [2] = {1.5, 17.9};\n    // sends one signal with name line and value 1.5 \n    // and another with name temperature and value 17.9\n    sendSignalsList (names, values, 2); \n    return 0;\n}", 
            "title": "sendSignalsList()"
        }, 
        {
            "location": "/signal/index.html#sendsignalslistandflag", 
            "text": "Description \nSends a list of signals to the dashboard and puts a flag on the graphs. The list of signal labels and values should have the same number of elements. \nNOTE: The function works with Wyliodrin IDE.  Syntax \nsendSignalsList(flag, names, values, elements)  Parameters   \n- flag: the name of the flag that appears on the graph (const char  ); \n- names: a list with the names of the signals (const char  ); \n- values: a list with the values of the signals (double  ); \n- elements: the length of the lists (int).    Returns \nthe error code (0 for success) (int)  Example \nPython:  from wyliodrin import *     # imports wyliodrin module\n\n# sends one signal with name line and value 1.5 \n# and another with name temperature and value 17.9\n# and puts the flag myFlag on both graphs\nsendSignalsListAndFlag ('myFlag', ['line', 'temperature'], [1.5, 17.9], 2)  JavaScript:  var wyliodrin = require ('wyliodrin');  // imports wyliodrin module\n\n// sends one signal with name line and value 1.5 \n// and another with name temperature and value 17.9\n// and puts the flag myFlag on both graphs\nwyliodrin.sendSignalsList ('myFlag', ['line', 'temperature'], [1.5, 17.9], 2);  C/C++:  #include  Wyliodrin.h           // imports wyliodrin library\n\nint main()\n{\n    const char names [2] = { line ,  temperature };\n    double values [2] = {1.5, 17.9};\n    // sends one signal with name line and value 1.5 \n    // and another with name temperature and value 17.9\n    // and puts the flag myFlag on both graphs\n    sendSignalsList ( myFlag , names, values, 2);   \n    return 0;\n}", 
            "title": "sendSignalsListAndFlag()"
        }, 
        {
            "location": "/signal/index.html#sendcoordinates", 
            "text": "Description \nSends a signal described by latitude and longitude to be displayed on a maps dashboard element.  \nNOTE: The function works with Wyliodrin IDE.  Syntax \nsendCoordinates(name, latitude, longitude)  Parameters   \n- name: the name of the signal (const char *); \n- latitude: the latitude to be displayed on the maps (double); \n- longitude: the longitude to be displayed on the maps (double).  Returns \nthe error code (0 for success) (int)  Example \nPython:  from wyliodrin import *             # imports wyliodrin module\n\n# places a point on the map, at latitude 45.5 and longitude 21.54\nsendCoordinates ('coord', 45.5, 21.45)    JavaScript:  var wyliodrin = require ('wyliodrin');  // imports wyliodrin module\n\n// places a point on the map, at latitude 45.5 and longitude 21.54\nwyliodrin.sendCoordinates ('coord', 45.5, 21.45);  C/C++:  #include  Wyliodrin.h           // imports wyliodrin library\n\nint main()\n{\n    // places a point on the map, at latitude 45.5 and longitude 21.54\n    sendCoordinates ('coord', 45.5, 21.45); \n    return 0;\n}", 
            "title": "sendCoordinates()"
        }, 
        {
            "location": "/signal/index.html#sendcoordinatesandflag", 
            "text": "Description \nSends a signal described by latitude and longitude to be displayed on a maps dashboard element and also puts a flag.  \nNOTE: The function works with Wyliodrin IDE.  Syntax \nsendCoordinates(name, latitude, longitude, flag)  Parameters   \n- name: the name of the signal (const char *); \n- latitude: the latitude to be displayed on the maps (double); \n- longitude: the longitude to be displayed on the maps (double); \n- flag: the name of the flag that appears on the maps.  Returns \nthe error code (0 for success) (int)  Example \nPython:  from wyliodrin import *             # imports wyliodrin module\n\n# places a point on the map, at latitude 45.5 and longitude 21.54\n# and puts the flag myPoint at that coordinates\nsendCoordinatesAndFlag ('coord', 45.5, 21.45, 'myPoint')      JavaScript:  var wyliodrin = require ('wyliodrin');  // imports wyliodrin module\n\n// places a point on the map, at latitude 45.5 and longitude 21.54\n// and puts the flag myPoint at that coordinates\nwyliodrin.sendCoordinatesAndFlag ('coord', 45.5, 21.45, 'myPoint');  C/C++:  #include  Wyliodrin.h           // imports wyliodrin library\n\nint main()\n{\n    // places a point on the map, at latitude 45.5 and longitude 21.54\n    // and puts the flag myPoint at that coordinates\n    sendCoordinatesAndFlag ('coord', 45.5, 21.45, 'myPoint');   \n    return 0;\n}", 
            "title": "sendCoordinatesAndFlag()"
        }, 
        {
            "location": "/signal/index.html#sendsignalxy", 
            "text": "Description \nSends a signal described by two coordinates.    \nNOTE: The function works with Wyliodrin IDE.  Syntax \nsendSignalXY(name, x, y)  Parameters   \n- name: the name of the signal (const char *); \n- x: the x coordinate of the signal (double); \n- y: the y coordinate of the signal; y is considered the timestamp of the value x (double).    Returns \nthe error code (0 for success) (int)  Example \nPython:  from wyliodrin import *             # imports wyliodrin module\n\n# sends a signal with name myLine and defined by values 3 and 15.5\nsendSignalXY ('myLine', 3, 15.5)  JavaScript:  var wyliodrin = require ('wyliodrin');  // imports wyliodrin module\n\n// sends a signal with name myLine and defined by values 3 and 15.5\nwyliodrin.sendSignalXY ('myLine', 3, 15.5);  C/C++:  #include  Wyliodrin.h           // imports wyliodrin library\n\nint main()\n{\n    // sends a signal with name myLine and defined by values 3 and 15.5\n    sendSignalXY ('myLine', 3, 15.5);\n    return 0;\n}", 
            "title": "sendSignalXY()"
        }, 
        {
            "location": "/signal/index.html#sendsignalxyandflag", 
            "text": "Description \nSends a signal described by two coordinates and puts a flag on the graph.    \nNOTE: The function works with Wyliodrin IDE.  Syntax \nsendSignalXY(name, x, y, flag)  Parameters   \n- name: the name of the signal (const char *); \n- x: the x coordinate of the signal (double); \n- y: the y coordinate of the signal; y is considered the timestamp of the value x (double); \n= flag: the name of the flag that appears on the graph.    Returns \nthe error code (0 for success) (int)  Example \nPython:  from wyliodrin import *             # imports wyliodrin module\n\n# sends a signal with name myLine and defined by values 3 and 15.5\n# and puts the flag myFlag on the graph\nsendSignalXYAndFlag ('myLine', 3, 15.5, 'myFlag')  JavaScript:  var wyliodrin = require ('wyliodrin');  // imports wyliodrin module\n\n// sends a signal with name myLine and defined by values 3 and 15.5\n// and puts the flag myFlag on the graph\nwyliodrin.sendSignalXYAndFlag ('myLine', 3, 15.5, 'myFlag');  C/C++:  #include  Wyliodrin.h           // imports wyliodrin library\n\nint main()\n{\n    // sends a signal with name myLine and defined by values 3 and 15.5\n    // and puts the flag myFlag on the graph\n    sendSignalXYAndFlag ('myLine', 3, 15.5, 'myFlag');\n    return 0;\n}", 
            "title": "sendSignalXYAndFlag()"
        }
    ]
}